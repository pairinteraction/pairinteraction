{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Introduction to the pairinteraction Library"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In addition to the [graphical user interface](../_static/slides/screen-win64.png), the pairinteraction software includes a library. The library can be used to write your own code and have more fine-grained control over what pairinteraction does, e.g. for searching optimal experimental parameters or calculating effective Hamiltonians and simulating Rydberg experiments.\n",
    "\n",
    "The library is fully written in C++ to obtain high performance. It provides a Python API generated with [SWIG](http://www.swig.org) so that one can work with all the functionality of the library in Python. The Python functions mirror the eponymous wrapped C++ functions. Thus, it is straight forward to transfer code between the two programming languages. The following introduction, which can be [downloaded](https://github.com/pairinteraction/pairinteraction/blob/master/doc/sphinx/examples_python/introduction.ipynb) as a Jupyter notebook, shows the basic usage of the pairinteraction library in Python&nbsp;3. The physics behind the presented calculations is reviewed in the pairinteraction paper [J. Phys. B: At. Mol. Opt. Phys. 50, 133001 (2017)](https://doi.org/10.1088/1361-6455/aa743a).\n",
    "\n",
    "## Units\n",
    "\n",
    "In the unit system used by the pairinteraction software, energies are given as frequencies in $\\text{GHz}$. To obtain actual energies, the frequencies must be multiplied by Planck's constant $h$. Length has the unit $\\mu\\text{m}$, the magnetic field $\\text{G}$, and the electric field $\\text{V/cm}$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Preparations"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Installation\n",
    "\n",
    "For using the Python API of the pairinteraction library, Python&nbsp;3 must be installed. For Windows or macOS, we recommend the installation of the Python&nbsp;3 distribution [Anaconda](https://www.anaconda.com/distribution/). Then, the pairinteraction library and all its dependencies can be installed via pip by calling ``pip install pairinteraction`` from the command line.\n",
    "\n",
    "Alternatively, we can install the pairinteraction library as part of the binary builds of the pairinteraction software available through [GitHub Releases](https://github.com/pairinteraction/pairinteraction/releases). However, for Windows and macOS, this requires manual [installation of dependencies and modifying the Python path](../installation.rst#python-library). It is also possible to [build pairinteraction from source](../installation.rst#building-from-source)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Importing the Library\n",
    "Our code starts with loading the required modules for the calculations. We use the module `pireal` of the pairinteraction library as the calculations shown in this introduction require only real-valued matrix elements (if one considers electric or magnetic fields with a non-zero $y$-value, complex matrix elements occur due to the definition of the spherical basis and one must use `picomplex`)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We call an IPython magic function to make the output of plotting commands displayed inline.\n",
    "%matplotlib inline\n",
    "\n",
    "# Arrays\n",
    "import numpy as np\n",
    "\n",
    "# Plotting\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Operating system interfaces\n",
    "import os\n",
    "\n",
    "# If the pairinteraction library was not installed via pip or using a Linux package manager,\n",
    "# we have to manually add the library path to the Python package search path. If the library\n",
    "# was for example installed using the Windows or macOS installers from GitHub releases, this\n",
    "# can be done by uncomment the following code block:\n",
    "#\n",
    "# import sys\n",
    "# if sys.platform == \"darwin\":\n",
    "#     sys.path.append(\"/Applications/pairinteraction.app/Contents/Resources\")\n",
    "# elif sys.platform == \"win32\":\n",
    "#     sys.path.append(\"C:\\Program Files\\pairinteraction\")\n",
    "\n",
    "# pairinteraction :-)\n",
    "from pairinteraction import pireal as pi"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Creating a Cache for Matrix Elements\n",
    "\n",
    "The `MatrixElementCache` class provides methods for evaluating matrix elements. Each Python script using the pairinteraction library typically requires one instance of this class. The instance is then passed to every object of the pairinteraction library which needs to evaluates matrix elements. To speed up calculations, the intermediate results of the calculation of matrix elements are cached into memory. If a directory name is passed to the constructor of the class, the specified directory is used to store a SQLite database which holds the intermediate results, making them available to future program runs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "if not os.path.exists(\"./cache\"):\n",
    "    os.makedirs(\"./cache\")\n",
    "cache = pi.MatrixElementCache(\"./cache\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Defining States\n",
    "Rydberg states are defined in the fine structure basis by specifying the *species* and the quantum numbers $n$, $l$, $j$, $m_j$. The pairinteraction software natively supports as species the  alkali metals lithium (`\"Li\"`), sodium (`\"Na\"`), potassium (`\"K\"`), rubidium (`\"Rb\"`), caesium (`\"Cs\"`). In addition, there is experimental support for the alkaline earth metal strontium in its singlet (`\"Sr1\"`) and triplet state (`\"Sr3\"`). The species-specific quantum defects and model potential parameters are stored in a database, created from a [SQL file](https://github.com/pairinteraction/pairinteraction/blob/master/pairinteraction/databases/quantum_defects.sql). Note that we do not differentiate between isotopes as they possess nearly identical quantum defects.\n",
    "\n",
    "The user can add further species to pairinteraction by inserting their quantum defects and model potential parameters into the SQL file. In order to make pairinteraction use the new SQL file, its path must be passed to the `MatrixElementCache` object by executing `cache.setDefectDB(\"path/to/new_quantum_defects.sql\")`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Single Atom States\n",
    "The `StateOne` class allows for defining states of single Rydberg atoms. For example, the state with the quantum numbers $n=61$, $l=0$, $j=1/2$, $m_j=-1/2$ of a rubidium atom is written as:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "state = pi.StateOne(\"Rb\", 61, 0, 0.5, -0.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Pair States\n",
    "The `StateTwo` class allows for defining states of two Rydberg atoms. Such a pair state can be defined as a combination of two single atom states."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "state1 = pi.StateOne(\"Rb\", 61, 0, 0.5, -0.5)\n",
    "state2 = pi.StateOne(\"Cs\", 60, 1, 1.5, 1.5)\n",
    "state = pi.StateTwo(state1, state2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Alternatively, a pair state can be initialized by specifying all parameters in pairs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "state = pi.StateTwo([\"Rb\", \"Cs\"], [61, 60], [0, 1], [0.5, 1.5], [-0.5, 1.5])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Afte the initialization of a pair state, the state of the first atom can be obtained by `StateTwo.getFirstState()` and the state of the second atom by `StateTwo.getSecondState()`.\n",
    "\n",
    "The classes `StateOne` and `StateTwo` own methods for receiving the properties of the states. Species are obtained by `State[...].getSpecies()` and quantum numbers by `State[...].getN()`, `State[...].getL()`, `State[...].getJ()`, `State[...].getM()`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Application 1: Energy Levels"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The energy of a single atom state or the total energy of a pair state is received by calling the method `State[...].getEnergy()`. Similarly, effective principal quantum numbers $n^*$ are obtained by `State[...].getNStar()`. Note that we must pass the previously created instance of the `MatrixElementCache` class to these methods, if we [specified a user-defined database](#defining-states) for quantum defects and model potential parameters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The energy of |Rb, 61 S_1/2, mj=1/2> is -982.3898169877917 GHz.\n",
      "The effective principal quantum number of |Rb, 61 S_1/2, mj=1/2> is 57.86876593760547.\n"
     ]
    }
   ],
   "source": [
    "# Define Rydberg state\n",
    "state = pi.StateOne(\"Rb\", 61, 0, 0.5, 0.5)\n",
    "\n",
    "# Get the energy of the state\n",
    "print(f\"The energy of {state} is {state.getEnergy()} GHz.\")\n",
    "\n",
    "# Get the effective principal quantum number of the state\n",
    "print(f\"The effective principal quantum number of {state} is {state.getNStar()}.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Application 2: Matrix Elements\n",
    "\n",
    "[//]: # (TODO: discuss the units of the matrix elements, calculate LeRoy radius as an example)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The instance of the `MatrixElementCache` class can be used directly to calculate matrix elements $\\langle f \\rvert A_q \\lvert i \\rangle$, where $A_q$ is an operator in spherical coordinates, $\\lvert i \\rangle=\\lvert n',l',j',m_j'\\rangle$ is the initial Rydberg state, and $\\langle f\\rvert =\\langle n, l, j, m \\rvert$ the final Rydberg state. The order $q$ of the operator $A_q$ is assumed to equal $m_j-m_j'$. The following matrix elements are supported:\n",
    "\n",
    "- `MatrixElementCache.getElectricDipole(state_f, state_i)` returns the matrix element of the electric dipole operator \n",
    "$d_q = \\sqrt{\\frac{4\\pi}{3}} e r Y_{1q}$ in units of $\\text{GHz}^1(\\text{V}/\\text{cm})^{-1}$, so that $\\langle f \\rvert d~E \\lvert i \\rangle$ and $\\langle f \\rvert \\frac{d~d}{4\\pi\\epsilon_0 R^3} \\lvert i \\rangle$ have the unit of an energy in the [unit system](#units) used by the pairinteraction software.\n",
    "- `MatrixElementCache.getElectricMultipole(state_f, state_i, kappa_radial, kappa_angular)` returns the matrix element of a generalized form of the electric multipole operator $p_{\\kappa_\\text{radial}, \\kappa_\\text{angular},q} = \\sqrt{\\frac{4\\pi}{2\\kappa_\\text{angular}+1}} e r^{\\kappa_\\text{radial}} Y_{\\kappa_\\text{angular} q}$\n",
    " in units of $\\text{GHz}^1(\\text{V}/\\text{cm})^{-1}\\mu\\text{m}^{\\kappa_\\text{radial}-1}$.\n",
    "- `MatrixElementCache.getMagneticDipole(state_f, state_i)` returns the matrix element of the magnetic dipole operator $\\mu_q = - \\frac{\\mu_B}{\\hbar} (g_l l_q + g_s s_q)$ in units of $GHz^1 G^{-1}$, so that $\\langle f \\rvert \\mu ~B \\lvert i \\rangle$ has the unit of an energy in the used unit system.\n",
    "- `MatrixElementCache.getRadial(state_f, state_i, kappa)` returns the matrix element of the radial operator $r^\\kappa$ in units of $\\mu\\text{m}^\\kappa$. \n",
    "\n",
    "Note that by default, Numerov's method is used for calculating radial wave functions. If Whittaker functions should be used instead, call `MatrixElementCache.setMethod(pi.WHITTAKER)`. Take attention that for small principal quantum numbers, these methods are not accurate. In this case, we can call `MatrixElementCache.loadElectricDipoleDB(\"path/to/database.csv\", \"species\")` to load [literature values](https://github.com/nikolasibalic/ARC-Alkali-Rydberg-Calculator/blob/master/arc/data) of electric dipole matrix elements that come with the [ARC software](https://arc-alkali-rydberg-calculator.readthedocs.io/en/latest/).\n",
    "\n",
    "The calculation of matrix elements of more complex operators can often be reduced to the calculation of the matrix elements stated above. Sometimes, additional constants occure in the expressions of the operators. The library provides the following constants in the unit system of the pairinteraction software:\n",
    "\n",
    "- `coulombs_constant` with value $1/(4\\pi\\epsilon_0) = 0.5955214763029308~\\text{GHz}^{-1}(\\text{V}/\\text{cm})^2 \\mu\\text{m}^3$\n",
    "- `electron_rest_mass` with value $m_e = 1374779.2437085041~\\text{GHz}^1(\\text{V}/\\text{cm})^{-2}\\text{G}^2$\n",
    "- `elementary_charge` with value $e = 24.17989262349962~\\text{GHz}^1(\\text{V}/\\text{cm})^{-1}\\mu \\text{m}^{-1}$\n",
    "- `bohr_magneton` with value $\\mu_B = 0.0013996245041347061~\\text{GHz}^1\\text{G}^{-1}$\n",
    "- `reduced_planck_constant` with value $\\hbar = 159.15494309517~\\text{GHz}^1(\\text{V}/\\text{cm})^{-1}\\mu \\text{m}^{1}\\text{G}^{1}$\n",
    "- `speed_of_light` with value $c = 299.79245799420306~(\\text{V}/\\text{cm})^{1}\\text{G}^{-1}$\n",
    "\n",
    "As an example, we show how to calculate a matrix element of the dipole-dipole interaction operator $V_{dd} = \\frac{-2d_0d_0-d_+d_- - d_-d_+}{4 \\pi \\epsilon_0 R^3}$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The matrix element has the value -0.0032526369083339785 GHz.\n"
     ]
    }
   ],
   "source": [
    "# Function for calculating a matrix element of the dipole-dipole interaction operator\n",
    "\n",
    "\n",
    "def getDipoleDipole(state_f, state_i, distance):\n",
    "    q = state_f.getM() - state_i.getM()\n",
    "\n",
    "    if q[0] == 0 and q[1] == 0:\n",
    "        prefactor = -2\n",
    "    elif q[0] == 1 and q[1] == -1:\n",
    "        prefactor = -1\n",
    "    elif q[0] == -1 and q[1] == 1:\n",
    "        prefactor = -1\n",
    "    else:\n",
    "        return 0\n",
    "\n",
    "    return (\n",
    "        prefactor\n",
    "        * pi.coulombs_constant\n",
    "        / distance**3\n",
    "        * cache.getElectricDipole(state_f.getFirstState(), state_i.getFirstState())\n",
    "        * cache.getElectricDipole(state_f.getSecondState(), state_i.getSecondState())\n",
    "    )\n",
    "\n",
    "\n",
    "# Define Rydberg states\n",
    "state_i = pi.StateTwo([\"Rb\", \"Rb\"], [61, 61], [0, 1], [0.5, 0.5], [0.5, 0.5])\n",
    "state_f = pi.StateTwo([\"Rb\", \"Rb\"], [61, 61], [1, 0], [0.5, 0.5], [0.5, 0.5])\n",
    "\n",
    "# Get the matrix element at an interatomic distance of 10 um\n",
    "distance = 10  # um\n",
    "matrixelement = getDipoleDipole(state_f, state_i, distance)\n",
    "print(f\"The matrix element has the value {matrixelement} GHz.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Application 3: Dispersion Coefficients"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We consider two interacting Rydberg atoms. We call the interatomic distance $R$ and the angle between the interatomic axis and the quantization axis the interaction angle $\\theta$. At large interatomic distances, the energy shifts of  Rydberg pair states due to the interaction can be estimated perturbatively.\n",
    "\n",
    "### Non-degenerate States\n",
    "\n",
    "For the beginning, we assume that the Rydberg pair state $\\lvert rr \\rangle$, for which we calculate the energy shift, has no degenerate states it can couple to. Thus *second order non-degenerate perturbation theory* is applicable and the energy shift is $C_6 / R^6$, where $C_6$ is the dispersion coefficient of the van der Waals interaction. For the calculation of the $C_6$ coefficient, we only consider states that couple significantly to $\\lvert rr \\rangle$. We ensure this by requiring that the difference between the principal quantum numbers of $\\lvert rr \\rangle$ and of the considered states is less than or equal to a constant $\\Delta N$, which can be set by the user to achieve convergence.\n",
    "\n",
    "The example show how to use the method `PerturbativeInteraction.getC6(state, deltaN)` to calculate the $C_6$ coefficient in units of $\\text{GHz}\\,\\mu\\text{m}^6$, passing the state $\\lvert rr \\rangle$ and $\\Delta N$ as arguments."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The C6 coefficient is 1.2105362290320048 GHz um^6.\n"
     ]
    }
   ],
   "source": [
    "# Define Rydberg state for which the C6 coefficient should be calculated\n",
    "state = pi.StateTwo([\"Cs\", \"Cs\"], [42, 42], [0, 0], [0.5, 0.5], [0.5, 0.5])\n",
    "\n",
    "# Angle between the interatomic axis and the quantization axis\n",
    "theta = 0  # rad\n",
    "\n",
    "# Use only states with similar principal quantum numbers for the calculation\n",
    "deltaN = 3\n",
    "\n",
    "# Get the C6 coefficient\n",
    "calculator = pi.PerturbativeInteraction(theta, cache)\n",
    "print(f\"The C6 coefficient is {calculator.getC6(state, deltaN)} GHz um^6.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Degenerate States\n",
    "\n",
    "In case of degenerate states, we must take into account the full subspace of degenerate states and use degenerate perturbation theory. Instead of a scalar dispersion coefficient, we obtain a matrix of the dimension of the degenerate subspace. If the states within the degenerate subspace couple in second order, we are still in the van der Waals regime and must apply *second order degenerate perturbation theory*. As in the non-degenerate case, we use the method `PerturbativeInteraction.getC6(degenerate_states, deltaN)`, but now passing a list of the degenerate states as its first argument. The entries of the returned matrix are of unit $\\text{GHz}\\,\\mu\\text{m}^6$. If the states within the degenerate subspace couple directly, we are in the resonant dipole-dipole regime and must apply *first order degenerate perturbation theory*. We use the method `PerturbativeInteraction.getC3(degenerate_states)`, whose returned matrix has the unit $\\text{GHz}\\,\\mu\\text{m}^3$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Basis of the degenerate subspace:\n",
      "|Cs, 42 S_1/2, mj=-1/2>|Cs, 42 S_1/2, mj=-1/2>\n",
      "|Cs, 42 S_1/2, mj=-1/2>|Cs, 42 S_1/2, mj=1/2>\n",
      "|Cs, 42 S_1/2, mj=1/2>|Cs, 42 S_1/2, mj=-1/2>\n",
      "|Cs, 42 S_1/2, mj=1/2>|Cs, 42 S_1/2, mj=1/2>\n",
      "\n",
      "C6 matrix in the basis of the degenerate subspace, in GHz um^6:\n",
      "[[ 1.25  0.02  0.02 -0.04]\n",
      " [ 0.02  1.21  0.03 -0.02]\n",
      " [ 0.02  0.03  1.21 -0.02]\n",
      " [-0.04 -0.02 -0.02  1.25]]\n"
     ]
    }
   ],
   "source": [
    "# Define degenerate subspace of Rydberg states that couple in second order\n",
    "degenerate_states = [\n",
    "    pi.StateTwo([\"Cs\", \"Cs\"], [42, 42], [0, 0], [0.5, 0.5], [m1, m2])\n",
    "    for m1 in [-0.5, 0.5]\n",
    "    for m2 in [-0.5, 0.5]\n",
    "]\n",
    "print(\"Basis of the degenerate subspace:\")\n",
    "print(\"\\n\".join(str(state) for state in degenerate_states))\n",
    "\n",
    "# Angle between the interatomic axis and the quantization axis\n",
    "theta = np.pi / 3  # rad\n",
    "\n",
    "# Use only states with similar principal quantum numbers for the calculation\n",
    "deltaN = 3\n",
    "\n",
    "# Get the C6 matrix\n",
    "calculator = pi.PerturbativeInteraction(theta, cache)\n",
    "print(\"\\nC6 matrix in the basis of the degenerate subspace, in GHz um^6:\")\n",
    "print(np.round(calculator.getC6(degenerate_states, deltaN), 2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Application 4: Non-perturbative Calculations\n",
    "\n",
    "In many recent Rydberg experiments, the measurements are so precise that deviations from the perturbative description are getting significant. In addition, there are Rydberg systems where perturbative calculations are not working at all because splittings between energy levels are smaller than interaction energies.  This especially happens for short interatomic distances or in the presence of electric fields. To study these systems, we must diagonalize their Hamiltonians.\n",
    "\n",
    "We can apply the pairinteraction library to construct and diagonalize Hamiltonians of Rydberg systems. For systems consisting of one single Rydberg atom, the class `SystemOne` is provided. For two Rydberg atoms, the class `SystemTwo` is given. Both of these classes are used in a similar way:\n",
    "\n",
    "- First, we tell which Rydberg states should be considered, letting the software create a **list of relevant Rydberg states**. The Rydberg states can be obtained by `System[...].getStates()`.\n",
    "- Second, we specify whether symmetries of the systems should be taken into account to speed up calculations. The software generates a **list of basis vectors**, where each basis vector is a linear combination of the previously given Rydberg states. If symmetries are specified, they are applied to reduce the size of the basis. The basis vectors can be obtained as the columns of the NumPy `csc_matrix` returned by `System[...].getBasisvectors()`.\n",
    "- Third, we set up the interactions. The software builds a **matrix representation of the Hamiltonian** in the previously generated basis. The Hamiltonian can be obtained by `System[...].getHamiltonian()` as a NumPy `csc_matrix`.\n",
    "\n",
    "Note that some Rydberg states might rarely occur within basis vectors or some basis vectors might have neglectable norm (if we e.g. remove some states which were solely needed for getting Stark shifted energies correct). To accelerate calculations, the software removes states with overlaps $<0.05$ and basis vectors with norms $<0.05$. In order to change the threshold, call `System[...].setMinimalNorm()`. \n",
    "\n",
    "After calling the method `System[...].diagonalize()`, the diagonal entries of the Hamiltonian contain the eigenenergies of the system and the list of basis vectors contains the eigenvectors. For speeding up calculations, the method can be called with a threshold. Values smaller than the threshold are pruned of the eigenvectors."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Systems of One Rydberg Atom, Calculate Stark and Zeeman Maps\n",
    "\n",
    "The `SystemOne` class defines systems consisting of single Rydberg atoms. Optionally, an electric field can be passed to `SystemOne.setEfield(field)` as a vector containing the $x,y,z$-coordinates of the field in units of $\\text{V}/\\text{cm}$ (the quantization axis points along $z$). `SystemOne.setBfield(field)` allows for applying a magnetic field in units of $\\text{G}$.\n",
    "\n",
    "As an example, we show how to calculate a Stark map."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x105c06908>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Define values of E-field pointing into the direction of the quantization axis\n",
    "array_efield = np.linspace(0, 10, 100)  # V/cm\n",
    "\n",
    "# Define state for which the Stark map should be calculated\n",
    "state = pi.StateOne(\"Rb\", 61, 1, 1.5, 1.5)\n",
    "\n",
    "# Initialize a system comprising one rubidium Rydberg atom\n",
    "system = pi.SystemOne(state.getSpecies(), cache)\n",
    "\n",
    "# Consider only states with similar energy and quantum numbers as the defined state\n",
    "system.restrictEnergy(state.getEnergy() - 100, state.getEnergy() + 100)\n",
    "system.restrictN(state.getN() - 2, state.getN() + 2)\n",
    "system.restrictL(state.getL() - 2, state.getL() + 2)\n",
    "\n",
    "# Because E-field points along quantization axis, the magnetic quantum number is conserved\n",
    "system.setConservedMomentaUnderRotation([state.getM()])\n",
    "\n",
    "# Diagonalize the Hamiltonian of the system for different E-fields\n",
    "array_eigenvalues = []\n",
    "array_overlaps = []\n",
    "\n",
    "for efield in array_efield:\n",
    "    system.setEfield([0, 0, efield])\n",
    "\n",
    "    # Diagonalize system, pruning values smaller than 1e-3 from eigenvectors\n",
    "    system.diagonalize(1e-3)\n",
    "\n",
    "    # Store the eigenenergies\n",
    "    array_eigenvalues.append(system.getHamiltonian().diagonal() - state.getEnergy())\n",
    "\n",
    "    # Store the overlap of the eigenstates with the defined state\n",
    "    array_overlaps.append(system.getOverlap(state))\n",
    "\n",
    "array_eigenvalues = np.ravel(array_eigenvalues)\n",
    "array_overlaps = np.ravel(array_overlaps)\n",
    "array_efield = np.repeat(array_efield, system.getNumBasisvectors())\n",
    "\n",
    "# Plot Stark map, the color code visualizes overlap of eigenstates with defined state\n",
    "plt.scatter(array_efield, array_eigenvalues, 20, array_overlaps)\n",
    "plt.xlabel(\"Electric field (V/cm)\")\n",
    "plt.ylabel(\"Energy (GHz)\")\n",
    "plt.ylim(-50, 50);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Systems of Two Rydberg Atoms, Calculate Pair Potentials\n",
    "\n",
    "Two instances of the class `SystemOne` can be passed to the constructor of `SystemTwo` to define a system consisting of two Rydberg atoms. The class provides methods for specifying the interaction between the Rydberg atoms. For example, the interatomic distance in $\\mu\\text{m}$ can be set by calling the method `SystemTwo.setDistance(distance)` and the interaction angle in $\\text{rad}$ by `SystemTwo.setAngle(theta)`.\n",
    "\n",
    "As an example, we show how to calculate pair potentials."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZQAAAEKCAYAAAA1qaOTAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4wLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvpW3flQAAIABJREFUeJzsnXd8VeX9x9/POefOLJKQvQOBEPaWqeIo7r3qaLXV2tpltda9ah2ttmqt/Tmq1daNdeNAERVkg2GFERISEsjeyV3nnOf3x01CAgEDZAHn/Xrx4txzn3Pu997cez7n+a5HSCmxsLCwsLA4XJT+NsDCwsLC4ujAEhQLCwsLix7BEhQLCwsLix7BEhQLCwsLix7BEhQLCwsLix7BEhQLCwsLix6hXwVFCDFXCLFFCJEvhLi1i+dnCyHWCCF0IcSFez1nCCG+a/33ft9ZbWFhYWHRFaK/6lCEECqwFTgFKAFWApdJKTd1GJMOhAM3A+9LKed1eK5JShnalzZbWFhYWOwfrR9fewqQL6UsABBCvA6cA7QLipRyR+tzZn8YaGFhYWHRffpTUJKAnR0elwBTD+J4pxBiFaADD0sp3+1qkBDiOuA6gJCQkInZ2dmHaG7vsHPLLjxN3vbHAoiICSc2dXD/GWVhYWHRgdWrV1dJKWO+b1x/CsrhkialLBVCZAILhRDrpZTb9x4kpXwWeBZg0qRJctWqVX1t5wH5ycjfUpxX2mnf8XOmc+frN/aTRRYWFhadEUIUdWdcfwblS4GUDo+TW/d1Cyllaev/BcAiYHxPGneo1JTVcdOpD3D24J9yZfaNrPtm8wHHzzx/Kg63vf2xw21n1vkHM1GzsLCwGBj0p6CsBLKEEBlCCDtwKdCtbC0hRKQQwtG6PRiYQYfYS39yx7mPkrc8H5/HT8XOau46/zHKi6v2O/6qey5m7tVzcIW5CIsK5cd/vJTjL57ehxZbWFhY9Az95vKSUupCiF8CnwIq8IKUcqMQ4n5glZTyfSHEZOAdIBI4Swhxn5RyJDACeKY1WK8QjKH0u6C0NHooyivB0PfkEAhVsHHpVuL2ExNRNZVf/v0n/PLvP+krMy0sLCx6hX6NoUgp5wPz99p3d4ftlQRdYXsf9y0wutcNPEgcLjtCiM47pSRsUEj/GGRhYWHRh1iV8j2Iqqn85IFLcLjtKKqC0+1gyNg0Jpw84LTPwsLCosc5krO8BiTn/3IumaNT2bxiO9GJkcy5ZBqqaum2hYXF0Y8lKL3AuONzGHd8ziEdaxgGJVt3I4QgeVgCimKJkYWFxZGBJSgDiJZGD78/6T6K80qQEjJGp/Lnz+/GFeLsb9MsLCwsvhfr9ncA8fxtr1C4vhhvsw9fi4/tuTt46e7X+9ssCwsLi25hCUof0NzgwdCN7x2Xv6aAgC/Q/jjgDbB1VUFvmmZhYWHRY1iC0otU7KzmpxNv4+KMX3FO/PXMf+HLA47PGJOGzbHHC2lz2BgyLr2XrbSwsLDoGSxB6UXuvfRJdm0vxwgY6H6dZ257nS0HmHFc98gVpAxPwhnqxBXqJC0nmasfuKwPLbawsLA4dKygfC8hpaRww046rjcjpWTL6gKGT8rs8piQiBCeXvUIheuLQUDGqFRUTe0rky0sLCwOC0tQegkhBGFRITRUN7XvU1SF6MTIAx6naipDx2f0tnkWFhYWPY4lKL3ILc9dxx+veApFUZBSMnrmcKadMSCaIlscxUgpMQ0TVVPRAzo+j5+QcDfeFh9Ndc1ExQ/C0+ihtrye2LQYPI0eKkuqSciIxe8NsLugnPiMWExTUrJlF3FpMdgcGgXriolJjiI0MpRtqwsYFBvO4ORo8pZtIywyhOThiWxYvBlniIMhY9NZ99UmbA6N4VOGkrtoE0LAyBnDWfdVHqZhMmb2CNZ/k4ffG2DM8TnkLduGp9HDmONz2LamkMaaJkbNzKZoUwm15XXkTBtG+Y5KyosqGTZ5CI3VTZRs3UXm2DQCPp3C9UWk5aSg2TW2rNxO8rAEwqPD2LBkM/HpMcSmxpD75QaiEiNJzU5m9YJcIgaHMWziEFZ++h3uMBc504ez6tPvsDttjDl+JKs+/Q5FEYyfM5o1X6zHCOhMPHUsuYs24mnyMnnueDZ+u5nGmmYmnjKG/LWF1JTVMW7OKEq2lFKxs5rRM0dQWVrNrm1ljDgui6Z6D8WbdjJ0fAZSSvLXFJI2KgWHy8Hm5dtIHpZARGw4GxdvIS5tMPGZcXy3cANRCYPIGJ3KmgXrCIsKY8SUoSz/eC3ucBdjZ+ew7MPVaA6NiaeMZflHa0BKppwxgRUfryXgDXD+b89g+tmTe/W7129LAPcH/bEeStmOSjavKiBicBhjZ2cfVKFi/tpC3n7iIwy/zhnXncLYE0b2oqUWh4KUEkM30GwaniYPNWV1xCRHU1tez67tZSQNjaehponC9cUkDolH9+tsXpFPTEo0dqeN3EUbGZwURfjgMFbMX0tkXARxaTEsn7+GkAg3aSOSWTF/LXaXnSHj0lj92TqEIhg6IYP1X+chTUnmmDQ2r9iGoZukj0qhcH0Rpi5JHBrHroJyBIKImHDqqxpQNRW7w4a32YfNoWGaEkPXsTvtBHw6UkocLjs+jx8pJU63o9O23+vHNEwcbge6X0cPGDhcdkzDJODXsbtsSBP8Xj92lx1k67bTBoDfE8DmsIGAgNePZrcBEt1voNnV4OcZMNHsKoZuIk2JoimYugkiOMs3AgaKKhBK27aCEGDoJqqmICXtgmqawXOomoJpSKRsPZ9hggRFEZhm8BoohOBovh4KRfD7F2/glCuPP/hjhVgtpZz0veOO5g9wbwbiAlv7I39tITfOugtviw8INp685+2bmTzXmuH0JKZpUrptN1JCdOIgVn2SS8Cvkz4qhcVvL6e50UPWhAy+fmspDdWNZE3MZM2CdTRUN5E6IomCdUV4Gr1EJQyioaoR1aZiGiamGbwwt/397A4bAV8AU0oEAqEIDN1ov9gZrRe4o/2iZtG/hEeH8XblCwd9XHcFxXJ5DVDefPT99osRgM/j5z/3z7ME5XvweXzs3LKL8OgwGqobWfVpLu4wF6ZpsvDVb3C4HDjDnKz+NBdFEYRFh9JQ3dR+h6vZVKQMnkcRe+5e28hbtq19e8PiPYunVe+qBSDg19v36R22PYH91yF1XO7AEhOL3sTT7P3+QYeBJSh9yNqv8lj28XeER4Vy5k9OICI6bL9j9Q4Fjm0E/PvuO5bwNHmoKK4iOjGK1QvWkbdsC1EJkWz4ZjMbv91MSEQIDdWNSFMGXTNtrozW2QBdXKt9JTWdHncUAdO6uFscZaRmJ/Xq+S1B6SMWvLaEp256BZ/Hj2ZT+ejFRTzz7X2ERYZ2Of7M609lxSdr8bX4AXC4HZz9ix/0pcn9RuGGYiqKKolOimLeYx+wY8NOBsVFsGHJZhRF4PP4URSB7jcQigApkZJOGXWd+P4mBQMTwR4R7GJbUQUgME0Tmz34U9b9BjanDUUI/F4/msOGqin4WoLfO5vDhrfFh0Bgc2hBN5wpUVUFwzTbYxVAlwJs0Qd0+FuL4Nc7uK0IZIebJGlKEK1uUlMiRPAAKYPbAtF6GokQCq5QJ/e/94deNd0SlD7iX/e8jc8TFAc9YNBY28wXbyzj3OtP7nL8hJPHcMdrN/LfP87DCBic86u5nHbNSX1pcq+zc0sp9VWN2J02nr/1FSpLqnGGOCjeVIJm1/A0ehBduJ0A2pxEsovnehMhgvEP0zBRVAVFVVA1Bb3VpdUWuJZSYrPbMHQDm0PD2+zD7rITnRhF+Y4KImLCSR6WyI4NO4mMiyBrQgabV24nYnAYY2bnsGHxZkIHuZl46jjWf70Jh9vOlNMnsGHxZhRVYcppE9iyYhumaTLhlLHkrykk4Asw4eTRFK4vxtPkJWfGcL74z9fUlteTPWUo7z39CXXl9SQOjacgtwjTMDFME1VVOrnqjjgh6SCAiiKQMug6bAvKIyWa3YbemjSADLomHW5HMN5lBF2dpmGiOTT8rb/TiMHhVO+uDXb+Hp7IrvwypJQMmzSE0m270f06I6cPpzS/DG+Tl1Gzsqksrqa+upHRs0ZQX9VAVUkNo2Zm42nysrugnBHHDUMi2bmplGGThuAMsbM9t4j0UalExUWwZVUBSUPjic+IZfOKfAYnRZE2MoVN324hYnAYWRMz2bB4MyERbkZMHcqGJVtxuu3kTBvGpqVbUTWVUTOz2bwiH4Cc6cMpyN0RtHVGNu4wV+/+KY4ln21/BuXPT/0lLY17/JeKKrjqtnO59KYz+sWe/qCiuJI3/vwe9ZUNNNQ0senbLaiaSkuTp88vYppdQ1EVdL+OzWFDUQQ2h42muiZAkDUxk6aaJnweP5Pnjqe5oYXGmiamnz0Jv0+ntryO8XNGI02TqtIahk8ZitPtoGxHJWk5yYREuKksqSY2JRpniBNPkxdXqHPfFT0PA9MMympteT0LXv4Kv9ePEdB558mP8fsCON0OdF1HGhK/d2C6SxVVaY8b2Rw2VE0l4PWDENidNqSUBLw6EklkbARCVWioaiAtJwVXqJPyokqGjEsnKj6SHRuLGTIunaQhCeSvLSA5O4nMMWlsW13A4KQosiYOYevKfCJiwhk+ZSjbVhcQOiiEIePSKM4rxRniJHlYAlWlNdjsGpFxg/B52pJiHO129uTf8EjByvLqgv4UlMdueJGv31mBzxP8YTtcdv726W1kjk7p1vEbv93CS/e8gbfZy2k/OYm518wZsF9s0zQp2lSCETBYvziPl+5+A78vgDTN9lTQ3sDm0DB0A4fbgREwiU4cRE1ZHc4QJydcMp1d+WW4Qp384Jo57N5ejqqpTD9nEtW7apEymH7bNvuw2W29YuPhUF5UyZJ3ViAU2J5bxOf//TqYVqsqwfTY1rTYvkJ0cK9oDhuGX8cR4kSaJjaHjeb6ZhCC7ClDqSiqQigKsy6cSllBBYZuMOfyWVQWV+Pz+Jh21kRqyurxNnkZOTMb3a/TWNNESnZScIbX5CUkwlpKu7+wsrwGGL/66xXYHRpL539HSISLnz98WbfFZNuaAv5w6v3t8ZSCdcX4vX7OueG03jT5oGiobmT5R2sI+AN88sJCCtcXY7YGx3ti9qHZVAzDxBXqJODXSciIpb6ygZiUwcy9+kTKiysZnBTNiZfNpKywgvDoUJKGJnTr3FHxnbsXqGr/trvxNHkoWFeM3WVj0etLWPDyVwghaKxtBoJFix0zw0zD3P/JDpZW/73NHhRnZ+vnHTrITV1FA2FRoUyeO46dW3YxODGKk66Yzc7NpYQOCmHGeVMo2bILV6iTrImZ+L0BVE05ZHGOT49t37bE5MjAmqEcATz163/x3lOfdNqXOCSOl7Y91U8WBSnKK+GbeUvxtfj58NkFwUK31mK3Q6VtlmFz2LHZNaaeMZ66ykaGTxrCD64+kYriKuIzYjtdbI4GVi/IZfn8NQhF8Pl/vkH3B4IFhYZsd20dNq1iodpUpClxhTrRAzrRiVE0VDeSOSaNST8YR/mOCoaMTWfK6RMo2bqLuPRYkrMSWmcjA3NWbNG7WDOUAY7P42dHXikOl5207MQD/lC7qq4X/bQ08JaV+Xzzv+U01jbxxX++JuDXkebBu1raAqbOECc2h8a0sybiafIx4eTRnHT5LOorG4lOjESzdf6KJg6J78m30y+YpknAF+D/fvcSaz5fB0JQWVJFwKt3zuY6FETws1VVBbM180cPGAyfPJQRx2XRUNXI5LnjGTEti5rddaRmJxF+gPT1uLSYPae2xMTie7AEpR8oK67iptMfwdPkwzBNxkwfxr3/vWG/nYVPv/ZkPv7XF3ibWwOEbjuX3XZen9mbv7aQVZ/lUllSxScvLMTvCRzUhU9RBaqqIhRBwpA4pCmZfdF0Tv/pSTTVNZM0NB67097pGGfa0bPsccAfoGZ3Hd5mL3+85G8U55UE/9YS9IDeefBBiIlmV9FsGlIGvxPSlJx46QyGTsjA1+Jn0qljScpKwDTNLt14iZlHvjhbDCwsl1c/cMs5j7JhWX6779vhsnPtfRdy5jUn7PeY/O8Kee3B/+Fp8nLCJTNorGmiub6ZKadPIHtKVo/bWFFcSd7yfEq37eaVB+Zh6CaG0XVx4N4IRaAoCnanjejEKE6/9mQURTD5tPG9Xlg1UGiub6aypIbKnVX86bLH0QNGMGPoEH9uiqagqiqKIlA0hbOuP5W0nBSklEw5fQKRsRE9+wYsLDpgubwGMDu3lXUKpPo8fgrzSg94zNBxGdz15k001jbxs3E3U1fRgO7XefPR97ntv79hxrlTDtsuPaBTVVpD4YZiHrzscRRVwdPooTv3HKoWzDRSFIVTf3Qi5//2DKRpkjoi+ZhZ08XT7KWuvJ7NK/N57Jqng59f0yG0uhDBmwzTlEw4aTTprZ1o514zh5jk6J433MKih7AEpR9IH5FEfXVTpxnK0NGp3Tr2kxe+pK6ioX3teV+Ln6d/++JhC0rh+iJuOfl+vM2+Tj3EDoSqqTjcNuxOBz+84/z2Sv7+zpLqawzD4Ku3lvLYNU8jFNGejdddNLuKZrfhdNkJiw7jhieuZnByNK5QJ7Epg3vJaguLnscSlH7gpqd+zM1n/oX6qkYMw2TKKaP5wRUzunVsc33zPj29Who9eFt8ON2Og7KjpqyOR370FFtXF+Bp9GDs7c/vAlULtnBwR7j56UNXcOKl3bP7aGT5R6t56Monaa5vCYaUuunOsjlsqDaV1OGJJA1LIC41hotvOWe/bXgsLI4U+jWGIoSYCzwBqMDzUsqH93p+NvA4MAa4VEo5r8NzPwLubH34gJType97vYESQ4Fg64fS7eU43Q7iUqO7nUGzaekWbjllT01KW7t0IQTpI1N48OM7iE7Y/6qQbV2Lt6zazvbvdtBc37LH/SYlXTn529qLuMPd/OLxq5lz2cyDfr9HC4Xri/jHb16koriK8uLKYO+rbuAOc2HoBidfNZvM0enEpERz3JkTrcwpiyOCAV8pL4RQga3AKUAJsBK4TEq5qcOYdCAcuBl4v01QhBBRwCpgEsEr4GpgopSy9kCvOZAEpQ1DN3ju3rdZ8PoyFE3hh787nfOum3PAY76et5Snb/w3zfUt+D3+dkFQVIWU4Ylcec/FDJuYSXxGLJ4mL4qq8OqD71C4vpiC9UXUltUR8HUxG+kgKEKAoqoIAdf+5UrO//Wx0yJmb7wtPha9voSyokrefuwDfB5ft2Yj7nAXRsDgqnsvJnVEMgmZsaTldK+Y1cJiIHEkBOWnAPlSygIAIcTrwDlAu6BIKXe0Prf3beAPgAVSyprW5xcAc4HXet/snuWVR+fzySvftjeOfOmh94mOj2D22RP3e8zsC6cx+8JpzPvrB/zr9lfbBcU0gi1P/nrtPwn4AghFQQ+YKIoAITq1Zu8SIXC67UgpOeWqE7j6gUtxhToHZBuSvkBKSUuTl19NvY3K4ir8vsD3VqW7w50Yusm1j1xB+shUEofGW4F0i2OG/hSUJGBnh8clwNTDOPaIzEdd/NHadjGBoEtq8YdrDygobUQlRKLZ1H2EoqXB0+GRwOyGW8XhtpM5Jo3Lbz+PmJTBZI5J6/Z7OBp54y/v8dI9b6D7dISgy47HbdidNoQQXHb7+QybmElaTjKxqTH7HW9hcbRy1AflhRDXAdcBpKZ2L5OqLwmP7NyjSFEVIqK7F5w9/qJpzH/uc7au2o4e0Lt2Yx0Am10jIiacEy6ZTtLQeOZec+I+lenHEk11zSx+ZwVbVuXz2YuLCLR26N2fe8vhdjD1zAmMO2EU2VOGkjUhsw+ttbAYePTn1aMU6OhQTm7d191jT9jr2EVdDZRSPgs8C8EYysEa2dtce+8F3Hrh4wT8BooicIY4uPhX3VtIS9VUHllwF6s+zSV/bSGvPvA2/r1XetxrdqLZNdxhTuLSYsgYncbPHr2S8Cgru6i2op7rx/+eloaWoGtrP8F2za4xODmKrPGZTD1zAqdedYIVWLewaKU/g/IawaD8SQQFYiXwQynlxi7G/hv4cK+g/GpgQuuQNQSD8jV7H9uRgRiUByjZXs6383Ox2VWGT0hn1Zd5oAhOOn8ySZndb4L4yYsLefIXzyFlsDuvKYM1IYZukD4yBZ/HT9bETG54/MeEDrK6twKs+Xwdb/7lPYo3l1K9q3a/MRJFFSiqysRTxnDbK78hJNzdx5ZaWPQfAz7LC0AIcTrBtGAVeEFK+SchxP3AKinl+0KIycA7QCTgBcqklCNbj70GuL31VH+SUr74fa83UAWlje0bS7j5vMfxefesmfLXd28kY0Rit8+hB3Sa61sIiwpl/TebqSiuYui4dDK6WTh5LLHmi/XcffbDnWJYHRFCYHfZEYrgkc/uIue4YX1soYXFwOCIEJS+ZqALyt0/+j9WftGe5IYQMG3uGO567qf9aNXRhZSStx//kPee+oTa8np8++kKYHfZGXt8DjPPm8r4k0eTkBHXx5ZaWAwcjoS0YYu96LhEMASDwc2dMrYsDpf3n/6El+56Y7/tZYQINl+ced4Ubn7hF8dsyrSFxaFgCcoAYs75k8lfX9LugnG47Mw5f7K1sNFhIqVk3t8+4JN/LaR8R+V+XVwOl5273vwdU06fYH3eFhaHgOXyGkBIKZn3zy949/lFIASpw+LZuKoQaUpOOn8Sv3ro4mOmc29P8saf3+U/98/r2r0lICp+EGk5KVz4u7OYctr4vjfQwmKAY8VQumCgC0pHPn5tKc/c+06H2YqNc39yPD++5cx+tuzIYc0X61n8znIWvvINzfUt+w4Q4HQ7+fuyB0kfabVEsbDYH1YM5Qhn+YINe1XQB1jx+UZLULrJ5698zeM/e6brVvICMkenMW7OKM647pRjZtEvC4vexhKUAUpUXDiqqmC01kUIEcw82rS6kMycJJwu+/ec4dhED+iU7ajkud//p0sxESJYPHrXWzeRnJXQDxZaWBy9WC6vAUp1WT03nPYXvC0+pCnRdRPNoaHZVNyhTh6b92tik/bfpv5YpGTbbm4+8R6aGzx4914pUUD6yBRGTs/mwt+dSfKw7tf2WFgc61gxlC44kgQFoKG2mSUfr2P115tZ8WUegdYmkIqqMOa4ITz035/3s4UDi2tH/46iTSV09Z12uO387es/Wv22LCwOge4KitIXxlgcGuGRIZz2w2mEhLvaxQSCbeoLNu3iy/dWU7m7rh8tHBis+Hgtz9/6X4ryOouJUAQhEW7ScpK593+3WGJiYdHLWDGUI4Cs0Sl89eFafJ49jR+b6lv4++1vIaXkwf/+nBET0vvPwH7kjb+8x3/ue6vLlGCHy87vX7yBGedO6QfLLCyOPawZyhHAaT+cxuQTRmBvjaFAcJbiafbhbfHzyK9fZu03W2ioae5nS/sW0zT5912v7yMmDrcdh9vB9HOmMP2cyf1knYXFsYcVQzmCqCit5fV/LODjV5fu85zbGZxsPvjaDQwfn97HlvUtekDn9Ufe5bsvN5D7Zefm1M4QB2f/Yi4nXT6LjNGpVsW7hUUPYNWhHIXEJkVy3CmjWPjO6s7tQ0yzvQ/YnZf/k9MuncLo6cOYfPLofrK0d3nwh0+wYv6a4GcggL3uic7+xQ+IS7NWTLSw6Gssl9cRxpQTc7jsl6egakrr3beEDmt4NNU38+aTn/LANc/w5pOf9J+hvURTXTPfvr9yj6BKUDQFZ6iD5OGJPPzpXZaYWFj0E5bL6wjF0A1WfbmJh37x704FfNI0IRAM3gshGDY6mdEzhnPVnedhdxy5nXMN3eDdpz5mw+I8lry7EtlhjXdXmIs7XvstU0+fcIAzWFhYHCqWy+soR9VUpp4ymguum8Ob/1iAEBDwG6DvSS+WpsmWVQUUbthJUV4pf5x3Yz9afOhIKbn/osdYvSAXX4sfoQiEEEgpUTWVkHAXY2aP6G8zLSyOeawZylFAQ00zRVtKufOSv3fOeDJN0I3gtoDwQSEMGZvKzc9cS3TCkVNlX7GziquH/xq/d0/atGpTSRoST8bYNK5/7EcMTozqRwstLI5urMLGY4jwqBBGTxvGQ2//lpSseFwhDhTBHjEBMCX1VQ3kfrWJm079ExU7q9ED+n7POVAoWFfEkndXBIPvHXC47Pzu+Z9z52s3WmJiYTFAsGYoRyHeFh8/m3on1btq0QNBUZGmGVwCshWbTUXVVO567ddMOmVMf5l6QF7509u89uD/UDUVT5MXBEhToqgK0QmRvLjlCRwuR3+baWFx1GP18uqCY0VQAOqrG3nx3nnk5xZRuL4YvUPrFqRsT7W1OTSOv2gaQ8akcOZ1Jw+YwH15USXXjPhNJzeXUAQxydGkj0zhxmd/xuCk6H60sH9o+70KIdADOlJKbHYb3hYfRkAnJCKEprpmvC0+ouIHUV/VSHNdM/EZsdRVNlBf2UBSVgIN1Y1UldaQMjyR5voWyndUkjw8Eb/XT8nW3e2dmHds3El8RixOt4P8tYXEpEQTERPO5uX5RMZFEJcew8YlWwiLDCE1J5n1X+fhDHEwdHwG677ahM1hI3vqUHIXbUJRBKNmZrPuq00YhsnoWSPYuGQzfm+AMcfnkLdsG55GD2OOzyF/bSGNNU2MmjWC4k0l1JbXM2JaFhVFVZQXVzJs0hAaq5so3babzLHp6P4AOzbsJHVEMjaHja2rt5M0NJ7w6DA2Lt1CXGoMsWkxrFu0gajEKFJHJLHm8/VERIeSNSGTVQvWERLmYsS0YaxekIvdYWP07BxWf5aLUATj54xi7cIN6H6dCaeMIffLjbQ0eph6xgQ2LN5MXWUDx505kc3Lt1FVUs2UMyayY30xu7bvZuIPxlFWUEHRpp2MmzOKhupG8tcUkjN9OIZusGnpVrImZOIMcZD75UbSR6YQlRjJ6s9ySciMIzUniaXvr2ZwUiTZU4ay+J0VRESHMe7EUXz11lJcYS6mnjGeRa9/i81hY8a5k/nqraVICbMvnMri/60g4NO55JZzDrlrhCUoXXC0CkrAr+Nt9hE6yL1PIZ9pmtxx7qNs/HZrh1RbuU/tht1pIzU7kR/edi4xSVEMm9i/fa82LM7jzrMe7rQwljvcxV+/up8hY9P7xAZpDEstAAAgAElEQVSfx0fApxM6KISK4kqa6lpIyopnx8YS6irqGTo+g4LcHVSV1pA1MZPivFLKCisYMjaNip3VFKwrInNMKo21zWxZmU/K8ESklGxcsqX1Iu1kw+I8ohIiGRQbwYbFeYRGhhCXFsumb7fgcNtJykogb9k2NLtKyvBEtq0pRAhB8rAEijaVIIQgLj2G8h0VCEVhUEw4dRX1qJqKM8RJc0MLNoctmLTh07E7begBA9MwsbvsBLx+pAy6EH0tPiTgdDuC2xIcbgd+rx9pmjjcDgI+HUM3cLjtGAEDPWBgd9qQpsTvC2B32gGJ3xvA7gzenPg9AWwODRAEfH40ezAXSPfr7SuQ6rqBqqlIU2KaJoqqBDP5ZPBGwjRNBKJ9liqUYFJG2/Pt263JGtB5u6t6pWOR3z7zM8649uSDPs4SlC44WgRl1YL1/N+tr9LS6CVhSBxb1gcvLPGpg/nTG79iUExYp5mGoRvMf+FLtqwuZOFrizEC5n7P7XDZAMm0MyYw47wpDBoczuhZ2X1Wcb49dwcPX/kkFcVVeJq8ndKD3WEuXi99Bleoa5/jvC0+7E4bvhYfRZtKCIsKRdVUchdtxB3uJio+giXvrsQZ4iAhI5aFry1Bs6mkjUxm8f9WIKUkLSeZ3C83YugGiUPjKdpUgqIIQgaFBC/Mdi342QnQbBreZi+aTUVRFfzeAIoqMHUThEAIMPTghREpMVsvgkgZ9DxaFziLfsAd7uK9upcP+jhLULrgSBcUb4uPLasKuPuixztXyqsqwmEPXrAUgXC7ScqI4Y//+glxyZ0D1u/9cwH/uuN1FFUJxiU6IiUdr3IOtx0hBKnZSSQOiSMiOowLbjwdRVFwuOyER4f12HtrrG2iZOsubp37AC31HmDPnaeiCGwOO7MumEpteT2JQ+MpK6xg2+oCouIH0VzfQmVJNaqmomgKqqoQ8AYwTYlmD971BnwBpARFUTDN/QuqhcXRjM1hY77n1YM+zhKULjhSBUVKyT9vepkPn/086BKQgKZ1mjUId4e79tAQFEUQHR/Bj285g8zsBNKHxrU/Xby5lKK8Uv59z1uU7ahsD9zvLSidbGgNhgOomoKUMGRsGg1VjWh2jVkXTKFwfTFIyXFnTGDdN5vR/Trj5oxi9ae5tDR5yJk2jJUff0dTXTOZY9LI/WojLQ0e4tJiKNtRgaIE7/SRnS/4QlX2uD50AyE65RdYWFh0k7EnjOTRhfce9HGWoHTBkSooC/77DU/9+kW8HWtMhEDY9ri12gVFCAhxt+93RIUgJdxwx1mceu7ETuetr2rkr9c/z9bVBTRUN6L7A3SF7CLm0vXA77/z7+jC2v+gvYVNsEdFjuDvawc3V2dfvyWQA5qO7slOf8M9f7d9Yjd0iOl02Ibg7+lA2xJJsKtScFtVVUzDRCLR7Fp7go3dacff6qlwhjrbVyl1h7toaQjO8kMi3O1xyIwxaTy17MHWONdBfgRWpfzRw/pv8jqLSQeEItBCnKh2e9AN5tiTRisBb4sfhOCJ+96lvKyeIdmJTDt+OEIIIgaHcV9r9XxRXgm3nvYQTfUt+L3+Q7xudyMwcCixgz7sGBwMHhMMNjtsqDYVn8ff6nazYRomAb+OZlODgWyvH78nQExyNEJAbXkDycMSMAyDyp3VxKXF0FzfTE1ZPa5QJy2NLUhDYkrZ/lkcDWIilD33E6qmYBhmazKAQPfr7QF6QzcQikBRlNbYkx9VVXGHu6ivakQIQWzqYOoq6vF5/KSPTKGxtonG2uCs1u/xU72rhiFj05FSsruwgswxabhCHOzYWEL6qBQiYsLZtrqAlOwk4jNiyFu2jfiMWDJGpbLhmzyik6IYPmkI677JIzw6jJxpw1j39SZcIU7GHJ/Dhm82o9k1xp6Qw8YlW0AIxs0Zyebl+Ri6wdjjc8j/bgd+j59Rs7IpzttFS0MLOdOGUV5URUN1I8MmZlJX2UBtWR0Zo1PxtvioKqkheXgipmFSXlRJ4pA4VE2lrLCC2NTB2F12yndUEpUwCGeIk4qiSiJiwnGHuagsqSYsMgRXmIuasjpcoU7cYS4aqhuxO224Ql00N7QEkzHcDnye4PXC4XKgB/RgEsYhCMlBfw+sGcrARErJf+6fx7y/fkjAH0AigoFdEWw7Mjg5ihnnTeW408cjNJX66kY+nbeKvNydGIZJwKcjbSq0ZtEAYNdwuGycevZ4brjljH1e0zBMasvq8DR5uPv8x6gsqUYPGAghMALGPuP3Mrht43vf1/cKSvtMpFVIOgqKNDsFtzWbitGasYQpMXQDm9OG7jcIjw6lZnctqk0jZ/owduaVYnfamX7OZPLXFqLaVE68dAYF64owTcnsC45j5+ZSAn6dyXPHUVZYgbfZx8iZ2TTXNdNU10L6yGSkhMaaJgbFRbDo9SVUFFcxKDaCtx57n+rSmmAQv64FRRXBVjECzO7MzHoT0apfrXEkobTFqII7HW4nAZ8fKSWaTcM0JWFRIdTsrmNQTDjJwxMp2bKL6KQosqcMZevqAgYnRjFuzmjylm5hUGwEk+aOY/OyrbjC3Ez6wRg2L89Hs2tMOGk0BeuKQAhGzhjO7u3lmIZJxuhUGmua8HsDxKREYxomfm8Ad1hwtt3x7t2if7FcXl1wJAnKJy9+yT9+++/2VipCCFS7hsPlQFEV/rboHlKzkzodY5oma77Zyo5tZbz89EL8HURAAthUEAJFVZg8ezjDRyZx0Q+nYXfsO1GVUtJQ3YTDbee1R97j63nLcThtlBdXImVwTZKAV++8fns3XF7BYcELhaopmKbENMy9btMlzjAX0oSwqBDqKxtIyIwjPSeZ0m27SRuZzOjZOexYX0TCkHjGnTiK7d/tICohkpEzhlO6dTfh0aHEpsbg9wWCmVjKoTeF8Lb4WPT6EprqgguYvfqnt2lu8OAMcWDoBgFfANPo+9+RalNRFIGhm2h2FU3TUDQFb7MXU5dkTcxA101a6luY9IOxaHaN6l21TPrBWFwhTqpKa8ieMpTwweGUFVaQOiKJyLgIqnfVEp0YicPlsC7qFsARIihCiLnAE4AKPC+lfHiv5x3Ay8BEoBq4REq5QwiRDuQBW1qHLpNSXv99r3ckCcrd5/2FZR+u7rQvPj2Gnz16FaNnZn9vhtXSL/N4+A9vEPDrmCZIVSHYjyWItKnYnTayhifw2D9/hKJ076LRXN/C5pXbcbhsCEXhi1cWo9lVkrMS+PKNJSBh7Ak5rPpsHXpAZ8rc8eSvLcTT5GX62ZMoL6qksaaJhMw4PnxmAc0NLRj+zsI0KDaCRxbcRUJGHK5Q50F8aoeHHtDZtHQrul+nsqSal+55A1+LD9MIZonpuvH9M7XDRNWC/nJXmBPTMHGHuaivakCz25h1wVSqSmpQbSqn//QkanbXYZom08+ZTEuDh4AvQMbo1HbXnNpxdmphcRgMeEERQqjAVuAUoARYCVwmpdzUYcwvgDFSyuuFEJcC50kpL2kVlA+llKMO5jWPJEF5/OfP8smLi4J37wS9PuNOHMUjn97Z7XOYpkl1ZSPXX/I0TY17UoQ7zVYUQUhUCCmpUdx865kkp/R+9Xnx5lJ+MemW9rb7iqogpcTpdqA5NP782d0MHZ/Rqza0fe/zlm3lf0/MRw/oFKwroq68HtOUXa5Rf7hodg1DN3CFOtH9OjEp0dRVNBARE85pPz2J8sIKBsVGcOrVJ1KxoxJnqJOsCRntbk4Li/7iSAjKTwHypZQFAEKI14FzgE0dxpwD3Nu6PQ94ShzFvywpJe/94xPm/e2jYBDNoSElmFKi2VSuf+xHB3U+RVGIiYvg0eeu4cHb3mJ3aS26bgRnK60fo2lK6mubaWho4Vc/f4n7HryI5OQooqJCeuMtArB6QW6nbK+2u+l/rHyYuPTYXmn/4mnysHVVAZpd5ePnF/LFq98gAMM0g8WIh4sAgQgmSbSKte7XCYsK5fiLplG9u5b0kSnMvfpEynZUMjg5ur29SVckpMcevk0WFn1MfwpKErCzw+MSYOr+xkgpdSFEPdB2C50hhFgLNAB3Sim/6epFhBDXAdcBpKam9pz1vcCn/17E87e91n537HDZOeHi6WRNzGDaWZOITR18SOfNyIrjuXm/xDBMrr/yWUp31qC3diKWEGxnIaGxwcOtv38NE7jyqhlcfvmMnnljrXz8wkL+73cv42n27vOc3WUjZXhSF0cdOptX5LN8/hpMw+Sj5z4n4PXj9/gxDLN76ctdIAQIRUGzqcFZVagLf4uPrImZnHT5LBprmhk6IYNJp47F5/HjdO/bvDI+I66LM1tYHPkcqWnDu4FUKWW1EGIi8K4QYqSUsmHvgVLKZ4FnIejy6mM7D4pP//1lJ1eLz+OnYmcVN7/w8x45v6oqPPbPq3jyz/PZtnk3u8vqkQrtsxUJ+Hw6KIKXX1rMkmX5pKQM5pofzyIuNvywXjv3q0384zcvdlpdUqgK0jBxuO387NGrDuv8EHTxzfvbRyx5ZwWmabL9u6L2nP1gdtnBzUSECH4mmk3DZlcJ+A0mnDSaWRcch7fZx6iZ2Qd0zXUlJhYWRzP9KSilQEqHx8mt+7oaUyKE0IAIoFoGHeA+ACnlaiHEdmAYcGQESPZDVz2qXGH77jscwiPc3PmnCwF4/LH5fP7pBrwdOvq2Zerqukle3m62bCtn6bJ8fnbtCcTEhDFxfDqq2v2MqdWfr+eFO1+nvKgSn6dz4aRms3HRrWcwfs5oxp14UOEwICgSLQ0eHv3pP1n/dR6mlHibvAR8Xazz0o1YYVsnAM2mkjoimePOmogRMJhx7hSGTx560PZZWBxr9KegrASyhBAZBIXjUuCHe415H/gRsBS4EFgopZRCiBigRkppCCEygSygoO9M73k8zV5+ePt5rP+6tYhRBO9wr7z7wl57zd/87jRycpLZuGEnCxZswBcwOs1WaK2faGzy8sRTC9A0hYz0GK65aiYhbgfDhid0mR3mbfax6vP1FG0u5bUH32mv5hWK0mldlsi4CK7+42UHZXPAr1NVWsO95z/Kjk07g1lRuomhf0/2Vdt0o7UIRtEUbHYNVdNIyIxFtalcfNPZjJszioBfJzoh0gqEW1gcJP2dNnw68DjBtOEXpJR/EkLcD6ySUr4vhHAC/wHGAzXApVLKAiHEBcD9QAAwgXuklB983+sNxCwvb4uP+y58jLVfrEdKmHneFAYnR6EoCnOvPpG0nOQ+sWP9+p3cftubCCFobvZhCmA/MxGHqqICSUmDGJoYhcNhY8y4FNZ8sYmAL8C6hevwNLTg9+rBNTt8/r0W91IQiuC+//2eid1c3Gt7bhF3nfsI1aW1rTGfPQWS3SmWFEKg2RRAMnnueCaePAbNrjHz/Kk92uTSwuJopMfShoUQk4BZQCLgATYAC6SUtT1haF8yEAXl8Z8/x4KXv2pfSMrhtnPdX67k7OtP7XNbGhs9FBdV8+4Ha/jm223BeMreSAkmKGawZ4jwGagBI7hd04hoLVKUzS1gGMGLvWkiW/uERcZGcNlt5zB+zijSRhxYLPPX7uD+Sx+nYmcV0pRIo+tZSFeCoigCRVOxu2yEhLm5/q9XkTUhA7vTTnRC5CF9PhYWxyqHnTYshLga+BVQCKwmWEToBGYCfxBCbADuklIW94zJxya5X23qtCqhr8XPdws39IughIW5GDkqmewRiaS8tpQlS/MpK6+jqcnXqXWI2NMRr3OxpNuBaPQE9zvs0OIJNrtrdR05XHau/+uVnHjx9P3aULGzmqd++xIl23ZTXlhBwNcx7tJ1I7C2xnx2p43QQSEkZsUzODGKax64lIRMK6PKwqKvOFAMxQ3MkFJ6unpSCDGOYOzCEpTDIC51MKXbdrensdrsGgn9nFaqqgpXXTGDq66YQW1tM7fc/iY7iqowdBMhO7RYlRLRtraIEHs1cQxu2xwaiekxZI5M4qQfzuxy/XopJesWb2F3YQUv3PkGjTVN7QWdKArsZ/0Szaah2VUyRqWSPXUosSmDOeO6k63sKguLfqI7Lq8UKeXOvfbFSynLetWyXmAgubxM06SiuIra8nruOPNh9EDQvRQZN4h/LH+Q0EG9V1h4KDQ1eWnx+Ln1969TVt4QTMfVTWj2B6VDSkR9M8KvB1cubGpBGAaTTxnNHS/9or3b7N5IKXnkp8+y7OPv2psDyoDeLlptLrM27M5gX64pc8cxckY2samDmXbWxMPq1WVhYXFgerJSvlAI8RbwEyll2wLf84EJh2PgsUxtRT03z7mP8qJKTN1k1gVTmX7OZGwOGxNPGYPD1fttpg8Gvy9AZXE1rlAHZ83O5uO3VuCIcNLgNSlrDmZwRQ4Opd7jQdjsTDlnPMdfMBFDN5k8Jr1LMampaODVvy+gYGMpW1duQ2/u0OpEU6FVYIUQKDYVm11j+lkTGTN7BElZ8Yw9fmSfvHcLC4vu0x1BWQ98AywWQlwkpdxOe7WCxaHw6DVPU7qtrD3Vdcl7q5h4yliOv2haP1u2h225RaxbvAXTlLz73EI8zb7g7EFVMRW11cUFRISCplJT20IgYRBGiI0v8kpY+EQZituGqgpGZidiAqdPzUY1oLq6ibcfno+3shnDMEGzg8sAT7CCvi3D1+G2kzUunWlnTSB9ZEqX7jILC4uBQ3cERUopnxZC5AIfCCH+wBG9bN7Bsf6bPB68/ElqK+oZMiaNe96+idiUQ2uB0sa2NYWd6iZ8LT7yVmzj1B8df7jmHjJSSha9tYy1i/LwNHtZ/tl6pCmDvb+k3LPksG6CHdC04Cp0Xj8y1IWQoPoMjBAbSDCadbxK8Gvy7dpCTJtg6YYdOHSBEpDoKSGEtPiwNQQXAMPlAo8XIQTuMBdjpmUxcvowzvvV3IMqpLSwsOg/uiMorS5yuUQIcRLwJpDdq1YNEKpKa7j9zIfbl9bM/24Ht5zyR17Me/yQi970gE5CZix1lQ3tgXiHy07aiJ7tY9UdTNPko399yYZvt1JZUsP2dUWdq9mVPU0kMSWobdvBmEbnFUzAbL3wS0B2+HiE3DPGq5jYDQmKoCUjgojcyuAYQNhUYhIiefDdm0gaYmVnWVgcaXRHUE5v25BS7hZCnAjsP+/zKCJv+bZOleCmYbK7oIK7znmE0bNGcOGNZ3Z7zYmGmibuOe8vbFq2FU1TcbjtKIqCNCVZEzI447pTeuttdKJtJlK4cSfrl2wlP3cH/o4ist9W6R3kQ1Hau+vaIkNAVfHpOma4ve0UGK6uxaXTGbXWVid2ldlnjuPi35xMUmIUmmqt42FhcSRyoDqU33XY7mrI171h0EAiPDpsT/pqK6ZhsvyjtXz35UY2fruV+/53c7dmKw9d8SRbVuYjTUnAr+NQ7Vx594WMnD6c4ZOH9HqW0vbcIkq3l/PlW0tZ88XG/a5R3wkp22coztaFroaOTSM8PhJ3iJPTr5hORVUTqqYQnxbNN8u3YZqS/Mpavs7dDoAhwFD3TFGUwJ6UY9UTQHdr+KKdvFm/m7eeeI0wl5Obz58NQjA8MYbM2Kge/ywsLCx6hwPNUDr2o/gZ8Ewv2zLgGD0rmzGzc1j39SYCPn2vuIefZR+s4nT3FSRmxnHnG78lY9S+7fGXfrCKlZ/m8t2ijZ1W+/P7AnibfYyYmtVr9ksp8TR5mffEfOY98TFCCLxt2VQHEkERXEsFTSU03M31D19KYmYcIeEukofGdRLQnA6HZXVwU3l9AXTTpGBXNf98bym1dc2UrtlJwG0HRaA2+NDqfTSMD677Ibzgcxv4As3c+tLHOMNsGKbk1HFZhLocZCfEcu74nG6vLGlhYdH3dKuXlxBirZRyfB/Y06scSh2KYZh8M28Z677exGcvfYXP4993kAgWA2oOGzHJ0Yw7YSTFm0vxtvgo2rSzs0upFYfbzs8f+xGn//SkQ307B2TZ/LU89OOn8XsD+8yy9ti95+KsKALVphERE0ZMUjS/efJHZIxM6fq4Q+DVv3/GK49/itEaNxKAqQrqpgVjRxLwRQZtkoBppz2X0LSB064RHebG5bIxJCaaO087kUi3C8Vq4Ghh0ev09IqNx0xW196oqsIJl0xn2tmTWP7RGqp312LsvcKfBEM3MQwfpdt2U7pt937PZ7NraHaNpKwETr5ydo/aWlFSzb/ueIPS7eUUrC/a1869EEKg2TWi4iNIzIzjt3+/mvj0mB61SQ/ofLdoE7s2lyKQnfPNO8w2DDtdzpravnjegE5pTQOmBgVVNSzYnE8Ak8gQF/eeNocIl4uYEDdDB/f+EsYWFhZd090Zyhop5RFfyHi4lfJVu2r4+w3/onBDMWU7Kvdd9U/sN94EgN1pY+b5U5lxzmSOO3MiNvvhrx5gmibrvt5M+c4qnrv9NZrrPfufkbSiqArOUCdJQ+K49YWfk5wVf9h2dIXP4+fGE+6ldFuwqYK3xY8WF42pqNgcGuGTU9GTQsGuUNhSj6IIWnwBDI1g/2lag/o2gh2GAal12FZpn8W4XDYMKZmZkUpyZASD3W4uHzeWMIfVhsXC4nA57G7DQoj17LlBHArktz1FsDbliKsy68nWK0/e8DwL/vN1J5eS+B7/vjPEwTNr/txjDQsNw+TuCx5jw7db29uWHAjNruF027n/7ZsYeVzvxW7aePOxD3j5vnl77BIQnRTN5AumM/O0sUyZsycCs76ojMr6JmpaWnj4g68wTBPdNJEawVb67F9QJARXnmzNa5CqxKYq2DUVh0MjzOHgtpmzSQwPw6lpZA6KstY6sbA4CHpCUNIOdKCUsugQbes3elJQpJQs/WA1RZt2snV1Aas+y8XvDQQvVFJimhJFU9A0lZCIECLjwvn1Uz8lZ9qww37tT17+imdvfQ1Pa33MgWYkzhA70oTr/3I508+YSPjg0D7re/X4L55n/vMLO+2LTojktaJ/HPA4wzRp8vqp93i4/e3P2FFVi45Ji6njb21hv4+gtG/LoLC0iUvrtgDsdhUEjBwcy4jYGByqymU5YxkSaWWSWVgciB5bD+VoojebQy6fv4ZtawuJTYmmZFsZuYs2Ep8ey7UPX87gpMO/YJXml/H2kx+za3s5G77dSsDfxVolHXC47IyeOZw5l0xnyJg00kf2zUJdHfn8lcU8ecO/2lOUNbvGcWeM5+43bjzoc/kNg+cXryS3tAy/obNq1y4EAq+uI0WrcLQJSgeh6SQubc8BUkiEAqqiIFSJUAQXZI1kckISupQcn5ROnNtaeMvCAnpmhvITIEpK+ZfWx6UEU4kF8Hsp5f/1oL19wkDqNtwdAn6dzSvyKS+u4u+/+Te+Zj+d/l57udgURRAS4SYtJ5lJJ4/i4pvO6pe2JVJKSvPL0P06Hz73OR89uxChCIaMTePBD/9AWGToYb9GbuluNuyuQJcGf/92GX7DxKMHEAoYraX5EjqIiwx+c7sQl2DfmOCmpgpsNhUpJdEhLgxpcnZ6DrMT02k2/EwYnESM6/Dtt7A4kugJQVkJzJVSVrc+XiulHN+6LO+nUsr+azx1iBxJgtLS6OHGE++nvKiKgD+A7u9itcIOgqLZVOLTY3now1uITe6/TKeAP8AdZzzEpm+3IBSFuPQYHpx/O84QJ2GRIb0Su/DpOiX1DYTYbDy6ZDFf79iBKhRq/R780mxflksqsktx6SgoIDvkPgb3KwSbA7jsGoYpSQ4Lw2sEmBWfyRlp2dT6PYwclEB6mOU6szg66QlBWdXxBEKI26WUD7Zur5BSTukxa/uIgS4oUkr++6d3eO/pT/G1+NADBqaxp1q9EwJsThuKonDXq78ie/JQQge5+z3Y/N8H3ub1h/7XXq+j2TVmXXAct7/ymz63ZXnJThYUbEcRgg/zN9Pg9+E3DAxpBmcxbR+V0hp3aROajuLSYVu0VfwjUVRQEAghcds1AqZBnCuEZsPHiEHxXJA+hmpfM0PCYpgVl4Xf0LGrh5/VZ2HRH/REHcqgjg86iIkCHF67XYtOtDR62LRsG8vnr+GTf3+Ff5/iyc4i4XDbmXTKGEbNHM6EOaNIz+n7+Mj+2LZ6e6fiT92vs/27wn6xZWpyClOTg8WZN0+fybaaKhyqxsKi7fxnYy4SSbWvGSnAkCYB0wyKSzcxkSAlTQE/QsDO5noURbK8spDllYXY1WCMxqYIfNJHuM3JmcljqfLVkxwSzYUpUyj31hHlCCUtpGfrfyws+oMDCcpnQogHpJR37rX/fuCzXrTpmKKiuIpfz7wbb4sPb5M3uHZ7F/Usmk3FHeYiIiaMU686notuPL3fZyNdMWRsGqs+zcXvDYqKalNJ78GK+0PFrqr/z955x1lRnX/4OVNu295Zdllg6V0BQQTFHnuLGmOJvSQa023Jz5qiiTGxxBhLTDSJsUeCxoqIICAgIEiHBXYXFra3W2fm/P6Yu7t3YYGFvXeLzMOHD2fOnpl5L7s73znnfc/7MibHDtcempnFDUfaE+yqQDPvbd2IlJIN9VX8a8NKpJQoQmAKyxYNOCihafHgRKTEsCxClkRVJPWRAP8sWYSqWOiKwotb5pGi65jSJN+bTqPZSLLm5ZsDplEXbiBJ83Bqv8k0GM24FI1Cb26v/J47OLSwvyWvJOBZ4ChgZbR7ArAUuE5K2dQtFsaR3rjk9Ytzf8vS97/cK/S3ZU+LUAS628XQIwbx6//ehjeapLG3Eg6Gue3k+9m8citCEWTkpfPogl+SnpPW06Z1CktKpJRUBpv5x/rlNEXCBMwQb5SsRgiBRKIIC6NFaIRFWxS2RFFkdIWyfVtVrHb9Sku/kK2uMEUxW9uaMNEUBSklSboCSLJcqYStZlShclLeFMIyhCUtjs+ZSkSGMSyD4SnFeFQ3lrTQFGeJzSE+xC1sWAhRDLTUW10TrdjYJ+ktghIORXj0e88y/43FhAJhW0xEWzSWEAJVV3B7XfzyrdvoNyiXzPz0PvN2alkWW1eXEgkbFI8vQnd1XE++LyHXOAAAACAASURBVBE0IviNCAL464bP2RVoIkV38XLJF1jRlDKqKglbLeHcEjXG5xIrKGqs0Ig2cVGELTYtbVW0tbXoDEnBateOVhLAq6roioKUFpIQYDEoqQiPqhIwAxyRPoE0PYnGSAMjUkeTpqdSF66hwFtEqp5B0PTjVRMTNOHQ94mHU36QlHLrfm4ggAIpZdkhW9nN9BZBeeyW53j/hT19JQKEwOXROeKEMYybMZKZF02Le26tRCCl5B8PvMabj70DwPm3ns7l/3fRYfFwMiyLJiOET9V5Y9tKtjfVkOnx8crWJVQE60nRPYSsIJoiCJkGipCgtMxGJZrYxywmVlCQaGpLUk0LXWlp2+LU0taj17XHtLVVxRY8DVAUAwUFTVh4VR1DRtAEICzcioccVzYNRjU57gIG+oqpDpWS7RnAkKSx7A5tJVXPpsg3jurQVnxaOjnuwfjNOlyKF13p3bNnh0MnHoLyKnbsy1vAMqAS8GCnYTkBOAm4R0r5QbyMTjS9RVAuKfouNTtr2/UJVUHVNGacdxS3//3mPlX2dtaT7/LM7f9oTY3vSXJz3YOXce7Np/ewZb2DVbVlbGysINedwpzdX7Gidhvpuo/t/gosaRGyDBRhIYWJgr2spgqzVVw0xWqbxdAyW4nOijoQFJC4FLO1rcX0u2P6XbH3iBU2bGETgEtEUIWCxEIHVEXFkhG8io6FiSpUkEFAku0uoilShqq4GJx0FPXhjaiKzpDkk6kJbQAhKE45iYZwCRKLQt8xNBtlmDJMjmciEauOiOUnzTUEAEM241LsNDlSysPiBaW3EpclLyHEaOAyYDqQD/iBtcA7wGtSymB8zO0eeougXDfuJ2xfV956rOoq599yOpfcfi6pWX1vd/aPj7+bVfPWtusbd+woHvnk/h6yqG8QMiOUB2pI15Moaa5gcfV6UjQvO4OVLKz6CpeiIwkTlmFMaWJaBqqwH/a26LTMaECNzkSg/QylK4JijzHa/D1YB2iDimnPwgBdGNFZFu0yTevYW6gsTDxCQxEKlgyjCYkqNEAipB9FUXEpaQjZjCmbSNaHIpCEzSpSXCNxKTpBo5Rk1xjcaib+8Hp8rlEk6YU0h1fj1YrxuobhD6/CpfYjyTUGf3gFmpKF1zWeYORLVJGKRx9HyFiHIry4tBEYVikCHU3tj5SNgEBRUpDStG0Th59vKi7p66WUa4Cfx82qwxgjYvDXn7/Ep298jqoq6G4Ny5SomkJyRlKfFROwK1u2vEWCvW0mNcvZTX4g3KpOcbIdeZbpHsqkzKF7jYlYBtv9FejRB+28yi9QhYJH1flw1wIsJGmal23+7ShCoApwCQsEhKxw6wMdbNFpQSDp2gt/y3bRlrmSPWuKfT21pGi9v6Qt+N3AQovaEpJh9Gg70ur/se3TZJigWWkLpLBoimzAnqVBTfAzAHRM/JFNUSssaoML7HMxog9+E4FEEToQQUezBVmGUYUXhAnSQMUFwkSgoGLY5ygpSKsGgUBTCzDNMnvWpo/ENLYCBm7XEZiRUsCPyzUJy9iBlPXorklgVSOtSjTXJLCascxSNNeRCAnS3Iiij0cILzKyBkUfiaLkIiMrENoQhFqEFVmGUAtQtOFY4WUoahZCH48ML0GIZIQ+ESJLQXhAPyra1kCfgoissL8frimIyFdAGFxHI5TEBsf0aC4vIcRpwKPY28eelVI+uMfX3cALwCSgGvhWi19HCHEncC1gArdKKd870P16coby6Pee5YMXPyHkt/0mLo/OWTedQv7gPE68dAapmX33AbxtbRm3Hn0XoWAYpMTtdfPYwl8xcHTPhwsfLjQZzRiWiU/1sLJ+FUEzSL4nj/nV82mMNFLo7c/yukU0GY1ku7KoCm1HVVSktFCFRFMUwlbI3scpDATCXl4TkbZZTMzMJba992xFtrbtmVJLEIGNwEITLT4eiS7aZlC6MGPaMUt4Mf2CFnGS6DF2tM2CbPsUETM+xm6FPfttO1rsU5CoHfTHfgagdQyAGrNXrP2Yln4R7RfR8S1tgcBCRHsUrKgQtvy/tYgiCFyAgUCNjo+g4MLeGhgGWko1hBF4oncM2v1CAVyIrNcQ2sH/Xvb65JBCCBXYAJwClAFLgG9HZ0UtY74HjJdS3iSEuAQ4X0r5rehS3EvAFKA/8CEwXNpz0n3Sk4JybsZV+BsCrceKqnDV/Rfz7TvO7xF74k3F1t3MffkzkJKZ3zqG/MHxSdHvkBhCZpAmo5F0VwZl/hKqw7vIcxdQFtjIjkAJOe4CqoIllAc3kK7n4DerqApux6MmIWQYiYEpIyhI3KqOKQ37rR97D4/EwNUqRu2XvGKXxRQsNNG2VBcrNFoCBEWN/t2zv10mHqQdqEDLOW0cuqC0yUfLmJb2Xv0dTB1F9M+e4wVin1VLFfb0wyrgmoGS+WyH4/dHvCs2JoIpwCYp5RYAIcS/gXOBNTFjzgXujbZfA56IRpedC/xbShkCSoQQm6LXW9hNth80duhsm6ComoLL4+o5g+JMv0G5XHL7eT1thkMncase3KodlTUwaRgDk+z6OAW+wQc815QGDZHdeNUUTBmhIrAet5qEW3jZ7l+CrnhJ1jIpaZyDprhI1QrY2jQHUMjQC6kILgZpkeLqT1NoIwJwK6lYsh5VaFgYaIAqFEwZQBcKCioWkejbuYH9xi8QwqJtMa3l5VjQ/jHe1q+0LvuJPca3vVjHPoZ7exiAbLeYeCAsMMsPPKwLHFBQhBBvAM8B/5NS7r8U4MFRAJTGHJcBU/c1RkppCCHqgaxo/6I9zi3o6CZCiBuAGwCKioriYvihcNX9F/PUT18g5A+javau95MuO7bH7IkHn81awqw/vYvm0vj2nRcw5pgRPW2SQzegCo0MV//W4yEp01rbOd62wm3FKW35Y4/MvqrDa5lWyBYQ4cNvlBOxmknWB1IfWk3YaiDNNYr60ArCZhWp7rE0hlbjN0pJc43BH16P39hEsj6SkLkTf3gtXr0YZD2ByDpcaj9AEjQ2oCnp6LgwzG0IXKhKClLWIzFRhQ8FAykNhBAoKLZQSQMFPepzCaDgicbgBVFwYQtSBCW6LGXPdNRou2VG0fLAbxGtPdsAh75KpByU5LnBddQh36szdGaG8iRwNfBYNJT4eSnl+oRaFUeklE8DT4O95NVTdpx14ylkF2Qy/83PSctO4YIfnkl6TmpPmdNlPnl1Ib+7+olWn9CKOav53Zx7GTU18ZUgHb4+qIobNbr2n6S35aTL8ratrvj0/NZ2hufILt3PkmEE9kZbw6pEFckIoRM2ShDCh6ZmEQqvQggXulpMKPw5IHDpYwmGPwNp4HZNIhRegJRB3K6jCIcWYVkNuNxTiYSXYpmVuNxTMSOrMc0ydNdRmJHNWOZWNNcEpLEbaW5E1UYhZTPSWIeiDrYDW4y1CCUfhA9pfAVKFoqSjYysBpGKovYHYzXgRahFCHMtCB3UQWCsBwSogxHmlmi7EMwy7OWuyYjUO7v0/3cgDigoUsoPgQ+FEGnAt6PtUuAZ4B9Syv3Xnd035UCsd6gw2tfRmDJhe6rSsJ3znTm313H0WZM4+qxJPW1GXHj5t/9pFROw68f/5/F3GDW1+7MKOzh0FkW0LTPram5r2623VVL1utsSqfu8J7e2k7U2f6euF7e2Xa4jWtseT2xVj+71j9oLSCIacWn/bgrhQsogSAOhJD7wp1O754QQWcBVwHXAcuzIrIlAVzY1LgGGCSEGCyFcwCXArD3GzAKujLYvBOZIO4pgFnCJEMIthBgMDAM+74ItCaGusp4fzbybb+jf4oLsq/n0jcU9bVLc6CiYQ1qHT/VPB4fehhBKq0NfCBciKp5CeLpFTKATgiKEeBP4FPABZ0spz5FSviyl/D5wyFZKKQ3gFuA97M2Sr0gpvxJC3C+EOCc67DkgK+p0/zFwR/Tcr4BXsB347wI3HyjCqye494KHWbtoA5Zp0VjTxENXPMaWL7f1tFlx4aKfnIPb1/a25/a6OOfm03rQIgcHh56mMz6Ux6SUH3f0hc6Eke0PKeU72LvuY/vujmkHgYv2ce6vgF915f6JRErJmoXr2721SwmrPl1L8fiBPWhZfDjx2zNQNZW3/vQ/NJfGZXd9k7HTR/a0WQ4ODj1IZwQlQwhxwR599cAqKeXuBNj0tUAIgS/FS3O9v7VP0QRp2X1zN3xHzLxoGjMvmnbggQ4ODocFnfGhXItdF+Wy6N9ngNuBBUKIKxJoW5/nB3++AbfXhe7W8SS5GTSmiBkX7BkZ7eDg4PD1oDMzFB0YJaXcBSCEyMNOhzIVmAe8mDjz+jYnXDKdwuH5rPp0Lek5qRx30TQ0vW8nllv8zhe8//e5+JI9XHzbuQwY0eH2HwcHh8OQzjzdClvEJMpuYICUskYIcaghw4cNwyYWM2xi8YEH9gHm/OtTHrnhKUL+MEIIPnl1IU8u+y2Fw/IPfLKDg8PXns4sec0VQswWQlwphLgSuz7K3GiJ4LrEmufQm3jhvlda955IKQk2h3jnmQ972CoHB4feQmdmKDcDFwAzoscvAK9H94OckCjDHHofRqR9ZLaUknDQmaQ6ODjY7HeGEs0IPEdK+bqU8kfRv6/Jnsx53weo2LqbBf/5nPVLNvW0KXHlrBtPxZPkbj12+1yccsVxPWiRg4NDb+JABbZMIYQlhEiTUtZ3l1F9mc9mLeHXlz6KqilYpsWJl87gh0/d+LUoX/qt285Fd2u89/zHeJLcXPOrSxlx1N5FoRwcHA5PDlgPRQjxFnAkdpqV5pZ+KeWtiTUt/iS6HoplWZyb9p3W2upg11f/9Ts/Z9yxoxJ2XwcHB4dEEs96KG9E/zocgEBjgEjYaNcnFMHu7VU9ZJFDd2BZFoqiIKUkEorg8riQUuJv8ONL9SGlpL6qsbUqZ01FHWnZKaiaSmVZNSmZybi9LnZtqyQ5PYmkNB87t+zCm+whIy+dsg07cHlc5AzIonT9DhRVof/QPMrW7cCyJEWjCihdt4NIKMKgcUWUb9hJsDnIoHFF7NpaSWNNE0MmDKSqvIbaXfUMHldEfVUjVWXVDBo7AH9DgJ0luxk4qgAjYlK2YSeFw/NRVIVtX5XSrzgPb7KHLSu3kV2YSXpuGhuXbSE9N428gdmsX7KZlIwkCobns27xJjxJborHD2TNwg3obp1hEwezbvFGEIIRU4ay/vNNWKbFqKOHsXHZFsLBCKOnDWfzym0EGgOMmjac7WvLaaxpYuTUoVSU7Ka2oo7hk4dQU1HH7u1VDD1yMP4GPzs2VTBobBGWabF9bRmFI/qju3W2rNxGv8G5pGYls2HpFrILMskuzGTd4k2k5aRSOLwfXy3YQHK6j8HjB7J6/jo8PjfDJg1m1afr0F0ao6cN58tP1yIEjJ0+ktXz12EYJhNmjmbNwg0EmoJMPGkc65dupqGqkYmnjGfzym1Ul9cw6dTxbF9bTkXJbo48aRxVZdVs/aqUI04YQ2NtMxu/2MKYY0ZiWRZfLVjP8MlD8CV7WD5nNcXji8jol86y91dSMDSfASP789mspeQW5TDiqCHMf2MRaTlpTJg5mnmvLsSX5mPK6UfwySsL0d06x5x/FJ/82y6RPPNbxzD35YWEA2HOuvFkcgqzE/q70KmKjUIIL1DUl9LWd0SiZyhSSi4tuomq8prWPrfPxROLH2TQmL5bDrdi625WzVuLL9XLlDOOjBYL6x4sy6Kprpnk9CSa6prZuWU3uUXZBBoDbF65jdyibBRFsGbhBjL7pZOSmczyOatIy04ltyibxbOXkZKVzIARBSz4z+d4kj0MnzSEhbOWoOoqo48eweJ3liGlZOwxo/jioy8xIgajpg7jq8/WEw6EGTapmE3LtxJsDlI8fiBlG3fSXO9nwIgCKkur8DcEyBuUQ0N1I4GmIGnZqYSCYcKBMG6vCyREwgZCEWi6ihkxsUwL3aNjGhZmxMDlc2EZFkbExOXRsSyJGTHQ3TqmYSItiaZrmJYJEhRFwbIsO7MsgJQoqoJlWHbhWF3FiL7c6G6dcCBsZzB3uwgFwnZtdK+LkD8EQuCOtiXg8bkJBcJIy8LtdRMORZCWhcvjwogYmKaFyx213TDRXCrSAtMwUXUVpMQ0LBTNrtZhGhaKartrLdNCKAIhwDLsNkLY/cLOlGt/LgCBtCQSaS8ZS9q3ZbSNRErazpGyo5pbXSk78rXh4Tn3MuH4MQd9XtxKAAshzgYeBlxSysFCiCOA+6WU5+z3xF5Id5QALlm9ndtPfYDmumaklNz65PWcdvWJCb1nIlk9fy13nv6rVh9Q4Yj+/HH+L3G5Oy8qpmliGhaarvLVgvU01TVTNLqQ+W8sprailiETBrPgP4vZta2KweOKWLtoA1U7askbmMOubZUYYQPdpWFETHS3RjgQRmInpAwHI1iWhaZpSGk/kKUlUXUV07AfvkIRTiZkh68PdsWvDtp0LJox/W6fm9lN/ziEW8ZPUJYBJwJzpZRHRvtWSynHHrRVPUx31ZQ3TZO63Q2kZCT1+TK/Vw7/Pjs2VbQeu30ubnz4Ss6+6dR24wJNAb78ZA1S2uWNX//j20RCEVKzU1j41lKklCSleomEDRRVIdAYRNWUtlBk5w3S4XAl9mdfUcCy9m6rKpjm3v37FJeYdrt7CT4wXzl4E+PoQ4lIKev3iFKKZyngrx2qqpKVn9HTZsSFut3tg/tC/jCbV5RQvmknn7y6kLf/8gFCCJob/JiGhWVahAKhDsWhsba53XG7fS2OmBz27FkUt0txkbEPaVUBM/rI0nWIRPdOuV0QihaJ87ggGG27XBCOtnUNIlG/qKaBEW135gHfaVsVaKmuroi2p+ue4tJyPzWmX1Pb7Isdowgw5V7XcceE/SeCzgjKV0KISwFVCDEMuBX4LKFWOfQoQX+Ix295jqXvrURKgaopmIb9AykEfPDip7z7t0+QpoVl9royNF0j5kGkqLafAkDTNSzTQkqJpqsgwTQtFFUgFAUzYrau70tLHjZLbPsSgY4qprf+16oKwrR9PdLnRon6bmRGCqK20R6TlQbV0ZeZrHSojiblyEyDmmh/ajI0+22xSPLZD/tQGLxu+26BoC0aLh0am+2Hr88D9RFbEHxee7yiQFKSLShCQEoSVEcFJS0NqqrtdkYaVLa009v6MzNi2ulQXWt/3sx0ZI1tt0hLRdY32GNSkqGxyW4nJ0FT9EXL64VAwG673W2i5tLbi1okRtQ6EhMh2gQU2ondQx/eQyLpjKB8H/g5EAJewi6I9UAijXLofkzD5JXfzWLZh1+yc8tuanfVEQnZP6yxk1OJaNsdH8/9rdGnjaIIUGwnraapWFLi9rowQgaWtJ3EkVDEdlAbJlJCZv90dm+rIinVx8DRhWxdU0pyehIjpwxjw9LN+FK9TDh+jB3Jk+TmqNOPZNW8NWi6xtFnT2bVvDVIKZl29mTWfb6RcDDClDMmsnnFVgKNASafOoGNy0uo213PqKnDefOxd6jdVUdWQQYr5nyFgkRKiaKIVuHt9bQ83UXUwW/ajnOJ7d0W2A50VAWkREYd4VgSmeJBNIfAsjALslF2VCEsMIv7oeyoQQTDWMX50OBHqa7HGmTnelO270IOzEP6PCjrS5GFuZCRgvxqCzI/G3IzkKs2Q24m9MuyH/BZaZCfaz9c01MhPwfWlkBaEvTLhs1ltkjkZcP2csjOgJxMKN9ti09WBuyqguQklMx0rOpa8HlRMtKwahsg342SnopV1wj9clFSk5GNzXY7JRkRCED/PEjyIUJhxIB8pNuDCIdRivLB48UMBFEK89FTfQQbAoh8F0m5aQTq/EQ0jZyiPCKhEI2VHgqG5wOSym2VDBhZiNfnonRtGQXD+5OVn8GGZZsoGJJP0Yh8Vnyyhv7FeYyeMoRF76wgd2A2k2aOYsF/l5Gel8bR3xjP/LeWkZzmY/o5k5g/aymaS+P4C6fy2awvQFqcePE0Pn//S0LBCKdcOp2MnNTE/lgdTpveu8uH0leQUvLRv+azZuF6NizdQsnq7YQD+0ilErs2u1f/vn+GhBBoLhVN14iEDSzLQtVUMnLT0Fwa/gY/444djS/VS1V5DUeeNI607BR2b69i+KQhZPXPoHT9DgaNGUBW/wx2bN5Fv0E5pGanUF/ZQEpmMrpLj4n4iQ+NtU3MeWkBweYgFVt38+6zHyFiBMMye0g4ogIgLYnLp6MIxY7mUgSqquL2uWiqbUJakkFji2iqbybQGGTM9JE01vup2VXH2GNHsXHbbmrKa8gbM4AN2ysxa/0oOalYbh1R04SR5EGmJ6HsqsPyRduVDeDVkUkeRGPQfuN36xAy7P97VQXLQmBHbmHJtmUrKREypm21tZEdjaHd+JYxAux7KAIhwTIlmqbYUWi6ai+7WhZut04kbODSNcLBCEJA/8JMdpbVkJTiYdT4QrasqyA51cvk6UNZu6IUX7Kb6SeOZt2XpegujaNPGMWmNeUIAUcdO4KS9RWYpsWEaUPYua2acDDC8AkDaKrz428KUTA4B8u08DcFSc9ORghhB5K4+naGcYivU3448FNgEDEzGillnwtdcgTFprKsmvJNFbz7/Md89p8lBP32RkwZ+8vdWWQ03FO132CFEIyaNhxPkhvLMDnj+pNRVJWQP8QRJ4whKc1HoClIRl56r8ke0PI78Pn/VrQmwKwqryEcirSG+LaucceJlsgzVVfQNA3DsCPYzIhFzoAsqsqr8fjcTD9vKqXry3F5XZzynZmUbdiBqqrMuGAqOzfvwrIsjjhhLI01TYRDEfKH5LF6SwXN/hA+r4tn3lxEXVMAn0tn09ZKdF3FHwyjAmbLGru1x8Pbij64o+8KoqVf7qdf7tEP7QVlz3b0fpoaDS02LXRFQdNVpGURCdqz43756ShCobHBz+hxhSQnudm9s56xRxaRnZ1CRXktQ0bkk98/je0lVQwYlE3/wkzKS6vJyUsjKyeFxvoAScluVE2N6/fwcCKeTvlXgaewi2x9zRbM40ckHKF6Ry0ZeWm4vYl1fHWFD//5KY9+9xlUXcXfEDika2guDVVTGTKhiGGTBuP2uDjj+pNJj06nk9KS9nu+N9l7SPeNFy0bDRHwzwdeZ/ZfPsCKPhj3PfPofBiaUGxx1VwqQigg7OvqLo2JJ49n17ZK+g/J4+QrZlK2YSeZ/dKZds4kKkoqSc5IInfAgTefGaZFMMWNJSVfbKvg2f8uIhQ2CIUNqmubUYTAH4q0iQOABWHD/hU2ZMwDPupH7rS8x/5XtMxEoitibk1FURRM00TBvm6/vFTqa/0oQjDzuBHUVDVhWZJTvzGO+lo/4bDB1GlDCAUN/P4wQ4fm4XJrhMMGXm/noyRHjClsbaem+zpsOySWzgiKIaX8c8It6cOsWbien5/5G4zoks5Pn7+ZE741vafNaiXQFOTFB15nwxdbWD1/HZZhQgdaIoS9KUxRFbzJHo678Gh2luxm7cIN9mY4Ae4kD7f/7XsUDu/PwNGFvWaWcSCklNTuqsc0TR684gnWLtrQ5eUrVVOQErzJHoywQcHwfJpqmxlx1FBOuGQ61TtqKRpdyJEnjqWprpmkNB+Ksu98rMXjB3bYH4oYqIrCFxvLePmTlYBkS1k1VXXNmJYkHDGQ7WYAMTOOdg9/2mniASOpouM1VcE0LXweDdOU+Dwu6uv9+Lwujp82nJ0VdaSl+jj7tAmU76jF63Ux4+hh1NY149JVcg5x3f5gxMShd9CZJa97sYtqvYntmAdASlmzr3N6K4lY8oqEI1zU7zqa69pqx7u9Lp796g/0G5Qb13sdCqZh8v1j/o9ta8uJhGKd6e2/70IIdI/GwJGF5A/J44bfXk7ugGyklLz1p3f5+N+fkZqVzDW//DaDxxV1/wfpAo21Tdxx2q8oWVWKEY2KOZgoLKEIFEXg9upYpsWgsUWE/CGmnjGR4y+ZTn1lA4PGDiCzX3xCxXfWNLB0UxmqojB74RoWr99u2yHBjBUOM2bZCdr7H6yYdky/EqOdwrIDCbDAo2uYpoVH02hqDpKblcJxk4dRUVnP4AFZfGPmaMp21pGTlcKIIXlYLec6HBbEc8nryui/P4vpk8DXowxhF6neUYsZbr8SqOmqnQOpBwWlpqKOv9z2Dzav3Eb5pgrMSMerlYqqkJqVTP7gPH7y7E0UjWxf0lcIwXm3nM55t5zeHWbHjUBTkF9f/hhL31/ZupR1MDMRTVfRPS6kZTH9vCmc8p3jCPlDjJo6jIy89LjaKqXktYWr+PDLTShC8MXGMhQEIcPAsvbwXcTSGqm1n70PMbMMaUp8Xh0hYGhBNo3NQY4cNYDjJw+lsqaJIQNzGD4od59iMShmKc4RE4eOOKCgSCkHd4chfZX03LTWvQotGBGTvB4Uk0BTkFum/cJe4jE6EJJo7iYpJT/763eZeeG0vYbs3l7J2kUbSc1OYcLxY/a7VNNbkFIy68n3WDBrKTs27qRmV32rkO5vJq5qSqtfaOLJ49B0jdOvPZGJJ42Lu40R06SyoRkVwd2vfMDykh2oiiASMQi3hBxL2jnGRUyIb+vX9/VZojMOXVfJy0xh7OA8AiGDEyYNY9KoQuoaAwzIy8Dr2XfqHEcsHA6VfQqKEOI2KeVvo+2LpJSvxnzt11LKu7rDwN6Ox+fmJ3/9Ho9c+2c0l4YRNrjop+f0SDJIKSVffbaBJe+toKmuuUMx0d0aA0cV8rO/3kRuUTZJqXs7LJfPWcXd5z5k70uwJOOOHcUD/72j14pKU10zpet38N7fP+Gjf35qJzzcAzuJYlsUm+bS0N0aGXnpnH/Labi8LqadM5mM3LS427ervomSyhoCoQj/98r7BCMGoYhhTx5avkWxYbEtjaiIdOQwF8KedWiKQv/sVEYOyMEyJefMGMvoQXkEQhGy05L3EofczJS4fz4Hhxb26UMRQnwhpZy4Z7uj475CIsOGK7buZttX0ZQIAAAAIABJREFUpeQNyu0xMXnoqidZOHsZ0pLRbLFt31uhCAaOLmDU1GHc8NBlHQpJCxfnX0ftrraUK54kNz97/maO62Am09OsWbSBu856CMCOWtvPvhg9OgvpP7Qf37nnQjxJHsbOGHlQiS47y9odu9laXUt5dQN//mgRmqrQFAzvEaJL+xBd6NCx7lFUNEXB69LJTU1C11SuOW0Kxf2ykFJSmJPuzCocEko8fChiH+2Ojg97+g3K7VGfyfI5X7Fw9rJ2xb1a9jq4vS4mnzqee179caeuVV/V2O7YNEyqynpPDIaUkrkvL2T1Z+t5/8V5hJr3npG0oGoKulsnIy+da399KamZSYydMRJNj/9ms5WlOymrrWfl9p28tnS1HbobjobutuwX3VeIbnRGIqA1JbuqKlx54mSG9ctC11SmjxmEtxtLBzg4HCz7+62S+2h3dOzQQ5imxbIPVrHgrSW2AzcWAeOPHcn4maO59M7zOn3N4vED2fLltlYntqIqjJjSe0r9PvXTF/nfcx+3bshsR9RBLYTAk+Tmop+cTe6ALI67aBoeX/z3B62vqGRXYxPvr9nIO1+uR8SKSEy47r5ERAjwaBqpXjfZKUlkp/j48TnHMSArDU1VnZmHQ59if4IyQQjRgP174I22iR57unJTIUQm8DL27vutwMVSytoOxl0J/CJ6+Esp5d+j/XOBfNp2U5wqpdzdFZv6IqZhcufZv2XDF1uwTEk4JtpMCOg3OJeHP7r7oK9735s/4/ZTH6CipBKA635zGWOOGRE3uw+FcCjCy7+bxZqFG/nio1X7DPvVdJWCof3JL87j+gcvY8CI/nG3pT4QpC4Q5IWFX/D6iq/az0RaBu1HRJLcdgGtmaMGMywvm+yUJM45ahQure+n6HA4vNnnT7CUMpF5Cu4APpJSPiiEuCN6fHvsgKjo3ANMxp4RLRNCzIoRnsuklId1HpV5b3zO+mVb2i1zoapoqiAjL41fvnXbIV03tyiHv659lKa6ZrzJnoQsDx0MUkruueBhVi9Y35aYco9Nei6vC2lJLrntHK74v28mzJY/f7qYP326CEUIQobZthckatO+RMSna1hS8uPTj2VAZhp5aSmM7J+TMDsdHHqCnnpSnAscH23/HZjLHoICfAP4oGUDpRDiA+A07IzHDth7TYw99peomsK/Nj9OalZyl3axCyFIyUjuqoldwrIsPnl1MWs/38SX89a1bkqEtl39QoAvzce9r/yYwuH5ZPWPfx2a99dt4v735tAQDBExzPabCxU6rg4kQFcVvLrOI5ecQX5aKrmpSSR7em9aHgeHrtJTgpInpdwZbVcAeR2MKQBKY47Lon0tPC+EMIHXsZfDOlwDEULcANwAUFTUt3Z474utX5XxtwdeZ9e2ynb7KxRVYdjEwaRl9/3QUCklD175JIv/tyJmBtY2LVFUBV+6h/7FefzkmZsYFJPHKR6U1zfwtyVfUFpbz6ebtxKJ3RS5rxQmAnQhSPN6eeryc+mfnkq61+v4QRwOGxImKEKID4F+HXzp57EHUkophDhYJ/9lUspyIUQKtqBcAbzQ0UAp5dPA02CHDR/kfXodO7bs4ocnPUCwOYiU9n4KRbU/1qDRBdz9rx/0sIVdR0rJ5pXbWPT2ckKBcNsXog53VVfJHZDN08sfimvIr5SS8oYGyusa+O7rs2iORFqTRiJinOyxRJezPLrGs5dfQEF6Gmled5/JcebgEE8SJihSypP39TUhxC4hRL6UcqcQIh87V9ielNO2LAZQiL00hpSyPPpvoxDiX8AU9iEoXzc+fnWRvcck+nAzwgZp2Sm8sOb3CYli6m6WfvAlv/rOnwg0BfdKJ6JqKv0G5jJs4mC++/vvxFVMIqbJd/8zi4XbSzEtC8O0omG8Yu8d6gJSXC4sKXnswrMZlJlOXmoyuuqkR3c4vOmpJa9Z2DnCHoz++1YHY94Dfi2EaFkUPxW4UwihAelSyiohhA6cBXzYDTa3Q0rJkndXsO2rUgaMLGDqmRO75a1UiL2dvkKIuIjJpuUlrF28kaz8DI4+e1K374yvLK/hgUsfI+iPnZVgP9gVQXpOCk8tezCuQrJy507+vnw5G6uq2VRVQyS2pPEemXoVwKVp/OC4aYzKy2Fkv1wyfT2bit/BoTfRU4LyIPCKEOJaYBtwMYAQYjJwk5TyOilljRDiAWBJ9Jz7o31JwHtRMVGxxeSZ7v4Af/7R3/jfcx9hhA00l8aJlx7Lj/5yY8LuJ6Vk55bdDBk/EN2jY/lDSAlun4vzbz61y9f/4MVPePSmpwHbPzF2xih+Obv70q3sLNnNp28tQajt7ycUBZdLo2hUAXe9eHNcxeSLHTu44tXXCBpRZ3/sbvWYWYlH05hU2J/JBQUcWzyQCQX5cbPBweHrhFMC+BDYXVrFVcNvbUsHjx22+vTKhykYGv+HjWmY3H/ZEyyfuwZVESSl+xg4sj+hQJgTLp7GGVcf36XZkWVZnJV8OZFg2+fxJHu4+9WfcNQ3jojHR9gvz9/7Km888R6KqtgO+JifSc2l8XrZn/EkxWc5z7As7p7zEW+sXYNhWVhmTDZfaE33rgiBT9PJ9Pg4b+wobpl+NIrjF3E4TIln+nqHPWisaUJ3a+0ERdNVGqqbKEjAhvK3//oxK+auIRx1UIdDEQaNLuThd+OTnzMcjOyV3l4AdTH5vBLF2s838eaT77ftL4FoNmQdJFz/m0viIiaGZbG1rpZ/rFzBm2vXEG5Z2trDP6IIgU/XyPB4eeWyS8hN7tnQaQeHvoQjKIdA4fB8dJfWrgyFqqkMHB3f0NUWNq3Y1i7ayTQstq4pi9v1PT43hcP7U7ZhR2u6Fcu0GHX0sLjdoyMsy6JkTZldMjcGRRFc/6tvM2rKEIYeMajL96n0N/Ot119mV3MTgUiktTx8q8O9JQmjpnHL0VM5esAARufm4nZ2rjs4HBS9Mx95L8ftdfP7ufdRMLx/a/ba3310D76UxDhoi8cX4Y4ph6qoCgPjnFLkN/+7i0FjBiCEICnNx10v/ZDC4fFPW9LCu3+fx7n9buKJH71IKGC0+1pKVjJnXX9il8XEH4mwvGIn3393Ntvr6/BHIrZ2CFpnJgqQ4fUwKieH35x6Ct+dOpUj+/d3xMTB4RBwfCh9ACNicM+3HmX1ZxtQFIWUjCQe+eDnZCdgV7hpmqgJDn9dv2wLt53527ZZV3SW4PXpCEXh12/9lJGTh3TpHiV1tVz8+r8JmgZN4fBe6UwVBG6h4dN1Zl92Of2S+/5mUAeHROH4UL4GrFu6hdcefw8jYnD+907lhl9fQjgQYeDogoTU8AASLiYAa5dsbl/lUtrLXA+/fxcFxf265DOxpKTS38z33/sv1QF/m47ELG25VZXjBw5mZtFgvjF0GJleJ/TXwSEeOILSS1m/bAu3n/Nw61v88rlruePZG5h2RuKjrhJFOBhhwewvKPmqHLFHOHJyRhJDxg3s0vVLG+q5dNYrVPqbCZpGdHd7m39GVxQ0ReWIfv14/LSznI2IDg5xxhGUXsobT37YzhEfCoT59yNv91lBCfpD/PCU31CxvQrLtIgYFrpHR42WGf7ZX67r8j1ueu8typsa7HQpEM3+KxEIvJrGjROP4pTBQxmZneOEADs4JABHUHopHdWDt8yO0tr2DT546TN2lOxuFx6clJXMdfd+k9FThtJ/SEf5QQ9MIBLh/oUfs6B8G9sb6tv7SgS4NBVFCk4fOpxbj5rm5NhycEggjqD0Us6+/gSWfLCqdZbi9ro4/3un9LBVh05dZQPhmH07YC+Bnfzt6V267i0f/pf55dsIxe4riYqKT9P58VHTOa14OIWpqV26j4ODw4FxBKWXMmHGSO7+x8289PBsjIjJuTeexAkXTo37fUzDpHZXHanZqQlx9BsRk1WfbUBz6bjceusMRXdpjJt+6FUgyxrrWV29mzmlW9rnkBTgUVUUFKYXDuSaCZOc5S0Hh27CEZRezKQTxzDpxDEJu/76pZu56/RfEvKHkcDPnv8ex1/ctRlDLKFAmJ+e/TDlm3YhFIGiabi8AiMUYey0Ydz21DWHdN3/laznh5+8gy4UrGhO+Rbnu1fTuXLMEZwyaBgT8/KdJS4Hh27EEZRehGVZPHfP68x+fi4CwTnXn8DVd1+QkIeiaZjcdfovaahuau17+OonGXHUUPIHH5o/Y09mPfcx29btbE1RIwSMnFTMw2//9JCTToZNkx/OfYegaRCE1k2K0pS4FI1sr49bJ03Dp7sOcCUHB4d44whKL+L1P33A7OfnEoqmb3/rmTlk5adz7g0nxf1eNRV1rfdpQdU1tq4ujZug7CypbJfvTErYVVZ9SGJiSclrG1ezuKIUQ5rE1EnErapMyO3H5LxCbjpiiiMmDg49hCMovYiFby9v95AP+cMsmL08IYKSlp2yZ/0qTMMgtyg7bvcYe/Qw5rz2eetn0nSVUZOLD+laP5r3Nu9t20CgJdW8IJpITSAQ/G7m6QxKi3/mAAcHh87j5PI6SMLBMLu2VRIJRw48+CBJz0lpt7ylKIKMnMREJ7k8Ln7y3E24vS58qV7cPhfn3nw6QyYM6vK11y4r4b6rnmLOm0uYcOxIVE1Bc2kUjy3kB3+4/KCvV9HcyDtb17eJCdghwYqGW1X59YxTHTFxcOgFODOUg2D+m4t58IrHAIGmq9z/1u2MP2503K5/zT3fZMW89UTCEQT2Q//KX5wXt+vvyYnfPpZRU4dTsno7eQNz4iIm65dv5c6LHiUUsAXX7dX5yRNXMemE0aRkJB2UP8iwLF7asJKlu0qxl7jalrlSdBe/m3E6JwwoxqMlJg2Ng4PDweEkh+wkVTtquGr499stSflSvby845m41nKvLK9hwezlCAEzzp5EVn563K7dHfz2lr/x8etL2vUNHTeAx9+/46CuI6Xk6g9fY1HFdoKm0brCJSUoQiHL42Pehdc7/hIHh27ASQ4ZZ0rXlaPpGiHaBEVakt3bqygaWRC3++QUZHLejfH3mXQX0tr7BeVQXlrW11WxOComYM9NFCFIdXkYkp7FH4490xETB4dehiMonSS3KJtIuH3dDtMw+9wMItGcddVxLPzfSkLBtiWvC246OIHcXF/NZzu27rU85tE0Xjnj2wzPyImbvQ4ODvHDEZROUjA0n8t+8U3+9cvX0VwaRsTg+09cR1JaUpeua1kWL/3+Hf734nw0XeXy28/i5Iunxcnq7qOqoo4F76xESvjxo9/hnRc/JRI2OPvqmRx/3gFnyq38ccV8nlq9GF1R8JuR1qqYqhBkeXwMTstM4KdwcHDoCo6gHASX3nkB08+bQsWWXRSNKiS/uOv7NV574n1efeL9Vt/MEz99idT0ZKacOq7L1+4uyksq+cFZvyccslPGu1waf/zvjykszj2o66yvreSp1YvtTYutqbkEmW4vozJzeHjGmeiKk3LewaG34oQNHyQDRxUy9cxJcRETgI9eWdx+70kgzJzXFsfl2t3F8w/Nxt8cIhI2iIQM/M0h/vbQ7IO+TmlTPfoemx5dqsqss6/kH9+4hH5JTlVFB4fejDND6WG8ye0jxIQAX4qnh6w5NOqrGts546Ulqatq2s8Z7akO+vnDik/ZWFeF34gQGx7sUlRyfV1bVnRwcOgenBlKD3PN/52P22tHKwlF4E32cOHNpybsflJK5r22iL/f+wpz/jW/fSneQ+SY08a3fgawU+1PP318p85tioQ4a/bz/HvjShbvLkVRBIoQ+DSdFN3NX0++0FnmcnDoIzgzlB5m/PQRPPzfn/LxG5+ju3ROu3w6/QbGL/3Jnvzxu88w51/zCTaH8CS5+WzWUn7+0g+6lIDyvGtnUlvVyOy/z0dKydlXzuDca47r1LnzdpTQEA5iSFvYIpaJIgRvnfkdBqSk41GdH1EHh76C89vaCxg6oYihE4oSfp/Ksmo+eGFea8LGYHOIRW8vY9uaMgaNGXDQ11v7xVbee20Juq5y9hXTueaOsw/6GqbVtrwVS1FKOm5HTBwc+hTOb+xhRHO9H01X22UAVjWV5nr/QV9r+YIN3Hfj31r3m3z45jL++Nr3GTi8X6fOL2uq5/cr5lHe3IAlLRQBlgSPqnF8QbEjJg4OfZAe8aEIITKFEB8IITZG/+0ws58Q4l0hRJ0QYvYe/YOFEIuFEJuEEC8LIZwt052gYFg+vlQvQrFnBEKApmsMHnfws6MX/vBeq5iAHZ322rNzO3VuVaCZs9/+G2+VrOHz3aVIAYVJ6YzOyOWKERN59NhzDtoeBweHnqennPJ3AB9JKYcBH0WPO+J3wBUd9D8E/EFKORSoBa5NiJUJxIiYbN+wk91lNd12T92l8YdP7mPYxMF4kj0MHjeQRz65F1+K96CvFSsmYG8+DAY6l4H5/dKNBMwIVrT4e9A0qAg08vZZV/PzySc6sxMHhz5KT/3mngscH23/HZgL3L7nICnlR0KI42P7hO09PhG4NOb8e4E/J8TSBFBdUcdPz32EuspGLMti2mnjue3Jqw+5iuHBkF+cx58W/6bL1zn9kqk899DbbVmFPTrfuPCoTp0rOXwSkjo4HE70lKDkSSl3RtsVwMHsEswC6qSULYm1yoD4ZWfsBn7/gxeoLK/BNOzIpkXvreL9lxZy2mXxq+eeaM667BhMw2L2Pz9DVVUuu/UUJs8cud9zLClZXlmOT9XRhIKCwELiVTW+OWScU//dwaGPkzBBEUJ8CHTkof157IGUUgohEvbKKoS4AbgBoKgo8ZFUnWHrmvJWMQHb/7Dpy+3QRwQlEjZQVIXzrjqW8646tlPnGJbF1XNeYVllOaoQSOCo3EJCpsHJhUP57ti+l7/MwcGhPQkTFCnlyfv6mhBilxAiX0q5UwiRD+w+iEtXA+lCCC06SykEyvdjx9PA02DXQzmI+ySMwqH9qK9uworuLnd7XQwa2b+HrTowgeYQD/zgn6xctBmhCL51/Uwuv+XkTs0s3tiymqWV5QSMNj9LdcjPh+dcn0iTHRwcupGecsrPAq6Mtq8E3ursidIurvExcOGhnN8b+PEfryA9JwVfigePz8XYo4dy+hUzetqsA/L4fW+xemkJliUxDYvX/zaf+e+t7tS5ZU117cQEYGdzYyLMdHBw6CF6yofyIPCKEOJaYBtwMYAQYjJwk5Tyuujxp8BIIFkIUQZcK6V8D9uB/28hxC+B5cBzPfAZDpl+A7N5buH9lKwpw+NzMWhUQZ/wH3y5ZAuRsNl6HApEWL5oM8eeduDMyGOz+uFVdQKmLSqqEIzOOLhsxA4ODr2bHhEUKWU1sFfVJSnlUuC6mOMOF+illFuAKQkzMIYdmyt49LtPU1GymzHTR3LL49ceUpjtnnh8LkZNLo6Dhd1HZk4K1bsaWo91l0puftp+z2kMh/jf9nX4jQjnDR7Na1tWoQqFfF8Kjx93bqJNdnBw6EacgP/90FjbxPen3UVjTRPSklSW1VBRsptHPrm/p03rEX5w3/n87DvPIKVEAFl5qZxz+TH7HF8fCnLG23+lJuTHsiSKovDXEy5kaFo2eb4UlD4wK3NwcOg8jqDsh1Xz1mKEjdbU7JFQhLWLN9JY20RKRnIPW9f9DBnVn6dn/5CVi7fgcmtMmTkSt0ff5/jn1y1ld6CZiBVdJrNMfvPFXN4565pustjBwaE7cQRlP+huDTsGoA1pSTS9b6VTN02Lj/4xj9INOykeP5DjL552yD6b7Lw0TjrnyE6NrQw0tYlJlOrgwecNc3Bw6Bs4grIfJpwwltwB2ezYvItIKILb5+bES2fgTe66D6W7kFJy/8WPsPzDVQT9dsr6FXNW8aO/3Njp8995fSlz31tNSpqXq753EkXFOZ0694SCIbyxZTUB096D6o4mfnRwcPh6IvZ8A/86M3nyZLl06dKDOsffGOCV371F+cadjJ85mjNvOOWQUqRIKXnvpYXMe2sZaVnJXPGzM+k/OPFRTlu+3MYPj72boD/U2qe7NV7Y8BhZ/TMPeP5Lz37Cv5/7lGAwghACj0/nqZe/R7+CDvN5thI2TSwk/1i/nD+snEfYMjmlcBiPTD8Lj7bvZTIHB4fehxBimZRy8oHGOTOUA+BL8XLV/Zd0+TovP/4+//7ju4QCYYQi+PzD1Tz18S/IOcCDuav4GwIoWnsB1HSN5oYAWZ3YS/nGPxcRjCaClFISChrMfXcVl1zbcQEtS0ru/vx9Xtq4AoDj+xez7OIfOIWyHBwOA5wSwN3EG3/+kFAgDNh+mHAwwidvHdxs6VAonjAQ3aW1+kwUVSElM5n+Qw4mfVobAvbyK8Xyz/Vf8Prm1ZhSYkrJ/Ipt/GbZx4d0LwcHh76FIyjdREualRaklHv1JQJfipdH5t7H0CMHkZTmY9TUofx+zj1oeudmDOdeMrU1kksIcLk1jt/PRsb5FdtaNy8ChEyDzyq2dukzODg49A2cdYhu4swrj+WtZ+faS14CXG6dY8+e2C33HjCi/yGnrL/shpmkpnmZ+/5qUtO8XHXLyeQX7tv3MiA5DV1RiFh28ksFQb4v9ZDu7eDg0LdwnPLdhGVZvPHUR3w6ezmpGUlc8/PzGDy6T2Xd7xR1oQBnvf03akMBAHRF4T+nX8mg1MT6ihwcHBJHZ53yjqA4xI1gNDzYsizm7SwhYllM7zeQTI+vhy1zcHDoCk6Ul0OXWPb5FpZ9voWMzCTOPHciviT3PsdGLJOfzH+bt7etA+CMgSN5ZMaZ6Erf2gDq4ODQNRxBcdiL/76xjL888SGhYATdpTL7P1/w1N+vx+t1dTj+T6sW8n7pRszobPeD0o08/uVn/PiIzhXfcnBw+HrgRHk57MUzT35EKLr3JBI2qalq4pOP1uxz/IKd21qXu8Be+vps57aE2+ng4NC7cATFYS/CYaPdsWVJgoHIPkZDQVIqakxuMFUICpP3n9bewcHh64cjKA57MeXoIeiuNv+HUASTpuw7B9ddk04gy+MjSXORpLnI9Pi4c9Lx3WCpg4NDb8KJ8nLYi4A/zB8eeptln28hNc3LD287gwkTB+33nIZwiAU7tyKRzMgfTKpr3058BweHvoUTNtwBPSEolmVRs6uB5DQvHt/X6yFbHfQzf8dWNEXh+IJikvSOnfYODg59GydsuBewY2sld37rCeqqm7BMi6vuOJtv3nhit93fNC2a6/2kZCTFvWZ9SUMN589+kYhlIoF0t5e3z76KDE/fSe3v4OAQXxwfSgK57+pnqNxRRzgYwYiYvPjwO6xZuqVb7r3gP0s4L/MaLin6HpcMvJmSVdvjev17Fn1IQzhEsxHBb0SoDDTx2MoFcb2Hg4ND38IRlAQhpaR00652mXmlZbFpVVnC712xtZIHr/oToUAYI2xQW1HHHWf8BtO09nveqlWl/PvlxXzwweoDjt3pb8Ci7bNFLIuypvq42O/g4NA3cZa8EoQQgrSsZOqqGlv7FFUhtzDxOa02r9yKqrXfpd5c76dudz1Z+R3ff9asL/jzU3MwDAtdV3n7nZX8/uFvo6odv3NM7zeI0sb61v0nXk3n2P6D4/tBHBwc+hTODCWB3Pnnq/D4XPhSPHh8Lo46cQxTTx6b8PvmFGZhGu1ruUsJKZnJHY63LMmfnvyIUMjANC2CwQgbN1awZGnJPu9xx+TjOa5gMIoQqEJw0dBxXD6yc7XmHRwcvp44M5QEMn7aMJ6d939sXLWdtMxkRk4cFHfneEcMn1TMKVccx4cvfopQBZZhceufrsHl7rj0bjhsdLjE1dAQ2Oc9PJrG0ydeQMg0UIRw8nY5ODg4gpJosvqlkdVv3wWpEsWtj1/DyZfNYNe2KoaMH0jRqH2nyvd4dIqLcygpqcQ0bb+IlDB2TOEB7+N2Svs6ODhEcfahOABQU9PEvfe9ybp1FaSlebnj9rOYNGlQuzERy+S+hR8xa8ta3KrG7UfN5MJhiV/Cc3Bw6FmcfSgOB0VmZjKPPXrFfsf8+vO5vLpxddQRH/r/9u4+yKq6juP4+wMsLE/ClIQE1WahhY0BgZmgoYBGmfCHM1ZWWs2QjZlQ9GDO5NTYRGNDTTHVODjCFFkGmE4aDxIW0SQPCwaIQsiDGALNpEIDmPDpj/PbvCwLu3vvuZy9y/c1c2fPvefp+4PZ/d7f75zz/XHnqqUM7NWHywc3nJEYQwgdW1yUD222eOfWk6oKL965tcCIQggdSSEJRdIbJC2TtC39bPFeVkmLJb0k6ffNPp8raYekDek1/MxEfnbrU3di6Zhu6kL/+vqCogkhdDRF9VC+ASy3PRRYnt635B7gVOMwX7U9PL02VCPIcKK7Lr2K+q7d6ALUdelKvx713DzsfUWHFULoIIq6hjIZGJeW5wFPAF9vvpHt5ZLGNf885Gfr9n1s276P8wb2Y+TFbz3tbc1jBzew6KM3smzXP+hZV8f173wPb+wZ88WHEDJFJZSBtvem5ReBgWUc47uSvkXq4dg+2tJGkqYCU9PbQ5KeLeNcAOcC/ypz344ml7bckkMgOegs/y+dpR3QedrSWdoBlbflbW3ZqGoJRdLjwHktrLqz9I1tS2rvvct3kCWi7sC9ZL2b77S0oe170zYVkbS2LbfN1YJoS8fTWdoBnactnaUdcObaUrWEYnvCqdZJ2idpkO29kgYB+9t57KbezVFJ9wMzKgg1hBBCDoq6KP8IcFNavgl4uD07pySEsgH/KcCmXKMLIYTQbkUllJnAREnbgAnpPZJGSZrTtJGklcBvgfGS9ki6Jq2aL2kjsJFsbPDuMxBzxcNmHUi0pePpLO2AztOWztIOOENtOatKr4QQQqieeFI+hBBCLiKhhBBCyEUklFZIeoukFZKelrRZ0u1Fx1QuSfWSVkt6KrXl20XHVAlJXSWtb16ap9ZI2ilpYyojVLPlsCX1l7RA0jOStkj6QNExlUPShSVlnTZIekXStKLjKpek6en3fZOkByRVrV5SXENpRbqjbJDtRkmEF2ezAAAFuElEQVR9gXXAFNtPFxxau6W74nrbPiSpDvgLcLvtvxUcWlkkfRkYBZxj+9qi4ymXpJ3AKNs1/RCdpHnASttzJHUHetl+qei4KiGpK/AC8H7bu4qOp70kDSb7PR9m+7CkB4HHbM+txvmih9IK23ttN6blg8AW4NSzVXVgzhxKb+vSqya/UUgaAnwEmNPatqH6JPUDrgDuA7D9aq0nk2Q8sL0Wk0mJbkBPSd2AXsA/q3WiSCjtIKkBGAE8WWwk5UvDRBvIHiZdZrtW2/Ij4GvAyXMX1x4DSyWtS6WCatHbgQPA/WkYco6k3kUHlYOPAQ8UHUS5bL8A/ADYDewFXra9tFrni4TSRpL6AAuBabZfKTqectk+Zns4MAS4RFLNTbko6Vpgv+11RceSk7G2RwKTgFslXVF0QGXoBowEfmZ7BPAfTl1FvCakYbvryJ6Fq0lpapDJZAn/zUBvSZ+s1vkiobRBut6wEJhve1HR8eQhDUesAD5UdCxlGANcl649/Bq4StIviw2pfOlbJLb3Aw8BlxQbUVn2AHtKerwLyBJMLZsENNreV3QgFZgA7LB9wPZ/gUXAZdU6WSSUVqQL2fcBW2zPKjqeSkgaIKl/Wu4JTASeKTaq9rN9h+0hthvIhiT+aLtq37qqSVLvdLMHaYjoamqwlJDtF4HnJV2YPhoP1NyNK818nBoe7kp2A5dK6pX+lo0nuw5cFTGnfOvGkE3ytTFdewD4pu3HCoypXIOAeenOlS7Ag7Zr+pbbTmAg8FCah6Yb8Cvbi4sNqWy3kZVF6g48B3ym4HjKlpL7RODzRcdSCdtPSloANAKvAeupYhmWuG04hBBCLmLIK4QQQi4ioYQQQshFJJQQQgi5iIQSQgghF5FQQggh5CISSjirSTqWKspuTlWYvyKpS1o3StKPT7Nvg6RPnLloTzp/T0l/SreBV3qsAZJq9Xbl0EFEQglnu8O2h9u+iOy5g0nAXQC219r+0mn2bQAKSyjAZ4FFto9VeiDbB4C9ksZUHlY4W0VCCSFJpU+mAl9UZlzTXCuSPlgyP8b69HT7TODy9Nn01GNZKakxvS5L+46T9ETJXCHz01PLSBot6a+pd7RaUt9UwPMeSWsk/V3SqR6uuxF4uOQc/39IVdJsSTen5Z2Svtc034qkkZKWSNou6ZaS4/0uHTOEssST8iGUsP1cGkJ6U7NVM4Bbba9KhUKPkBU/nNE0F4ukXsBE20ckDSUr2zEq7T8CuIisdPgqYIyk1cBvgBtsr5F0DnAY+BxZVdjRknoAqyQttb2jKZj0NPr5tne2sWm7bQ+X9ENgLlkFiHqyMi8/T9usBe5u4/FCOEkklBDaZhUwS9J8smGmPamTUaoOmC1pOHAMuKBk3WrbewBSCZ8G4GVgr+01AE1VrCVdDVws6fq0bz9gKLCj5HjnAu2Zb+SR9HMj0CfN7XNQ0lFJ/VOx0P1kFWlDKEsklBBKSDqfLBnsB97d9LntmZIeBT5M1mO4poXdpwP7gPeSDScfKVl3tGT5GKf/3RNwm+0lp9nmMFkPo8lrnDiE3Xya16bzH28Wy/GSWOrTcUMoS1xDCSGRNIBs+Ge2mxW5k/QO2xttfx9YA7wLOAj0LdmsH1mP4zhZQdHW7r56FhgkaXQ6R980q94S4Atp2gQkXdB8sirb/wa66vX5wXcBwyT1SBWlx7e3/WQ9qpqrdBw6juihhLNdzzQEVUf2Lf8XQEvTFEyTdCXZN/rNwB/S8jFJT5Fdl/gpsFDSp4HFZJNMnZLtVyXdAPwkTSdwmGz+ijlkQ2KN6eL9AWBKC4dYCowFHrf9vLL5wjeRDY2tb/O/wOuuBB4tY78QgKg2HELNkjQSmG77Uzkd78/A5NT7CaHdYsgrhBpluxFYkdeDjcCsSCahEtFDCSGEkIvooYQQQshFJJQQQgi5iIQSQgghF5FQQggh5CISSgghhFz8D5gnJj4uR/MfAAAAAElFTkSuQmCC",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1082b9cf8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Define interatomic distances\n",
    "array_distance = np.linspace(8, 2, 100)  # um\n",
    "\n",
    "# Define interaction angle\n",
    "theta = 0  # rad\n",
    "\n",
    "\"\"\" System containing single atom \"\"\"\n",
    "\n",
    "# Define single atom state\n",
    "state_one = pi.StateOne(\"Rb\", 57, 2, 1.5, 1.5)\n",
    "\n",
    "# Initialize a system comprising one rubidium Rydberg atom\n",
    "system_one = pi.SystemOne(state_one.getSpecies(), cache)\n",
    "\n",
    "# Consider only states with similar energy and quantum numbers as the defined state\n",
    "system_one.restrictEnergy(state_one.getEnergy() - 40, state_one.getEnergy() + 40)\n",
    "system_one.restrictN(state_one.getN() - 2, state_one.getN() + 2)\n",
    "system_one.restrictL(state_one.getL() - 2, state_one.getL() + 2)\n",
    "\n",
    "# Diagonalize one-atom system, pruning values smaller than 1e-3 from eigenvectors\n",
    "system_one.diagonalize(1e-3)\n",
    "\n",
    "\"\"\" System containing two atoms \"\"\"\n",
    "\n",
    "# Define pair state, comprising two atoms in the state defined above\n",
    "state_two = pi.StateTwo(state_one, state_one)\n",
    "\n",
    "# Initialize a new system, comprising two of the single atom systems defined above\n",
    "system_two = pi.SystemTwo(system_one, system_one, cache)\n",
    "\n",
    "# Consider only pair states with similar energy as the defined pair state\n",
    "system_two.restrictEnergy(state_two.getEnergy() - 4, state_two.getEnergy() + 4)\n",
    "\n",
    "# Because no electric field, parity under inversion is conserved\n",
    "system_two.setConservedParityUnderInversion(pi.ODD)\n",
    "\n",
    "# Because no multipole interaction of higher order, parity under permutation is conserved\n",
    "system_two.setConservedParityUnderPermutation(pi.ODD)\n",
    "\n",
    "# If the interaction angle is zero, the total magnetic quantum number is conserved\n",
    "if theta == 0:\n",
    "    system_two.setConservedMomentaUnderRotation([int(np.sum(state_two.getM()))])\n",
    "\n",
    "# Set interaction angle\n",
    "system_two.setAngle(theta)\n",
    "\n",
    "# Diagonalize the Hamiltonian of the system for different distances\n",
    "array_eigenvalues = []\n",
    "array_overlaps = []\n",
    "\n",
    "for distance in array_distance:\n",
    "    system_two.setDistance(distance)\n",
    "\n",
    "    # Diagonalize two-atom system, pruning values smaller than 1e-3 from eigenvectors\n",
    "    system_two.diagonalize(1e-3)\n",
    "\n",
    "    # Store the eigenenergies\n",
    "    array_eigenvalues.append(\n",
    "        system_two.getHamiltonian().diagonal() - state_two.getEnergy()\n",
    "    )\n",
    "\n",
    "    # Store the overlap of the eigenstates with the defined state\n",
    "    array_overlaps.append(system_two.getOverlap(state_two))\n",
    "\n",
    "array_eigenvalues = np.ravel(array_eigenvalues)\n",
    "array_overlaps = np.ravel(array_overlaps)\n",
    "array_distance = np.repeat(array_distance, system_two.getNumBasisvectors())\n",
    "\n",
    "# Plot pair potentials, the color code visualizes overlap of eigenstates with defined state\n",
    "plt.scatter(array_distance, array_eigenvalues, 20, array_overlaps)\n",
    "plt.xlabel(\"Distance (um)\")\n",
    "plt.ylabel(\"Energy (GHz)\")\n",
    "plt.ylim(-0.15, 0.15);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Application 5: Effective Hamiltonians\n",
    "\n",
    "Recent experimental progress allows for the realization of many-body systems, such as Ising-models, with Rydberg atoms. In order to obtain systems which are computationally tractable and obey vivid theoretical descriptions, one typically considers only a small subspace of atomic states and describes the interaction between them by an effective Hamiltonian.\n",
    "\n",
    "This restriction to a small subspace $S$ is possible if the Hamiltonian can be written as $H=H_0 + H'$, where $H_0$ leaves $S$ invariant and $H'$ is a small perturbation which couples states within $S$ to states outside of $S$. We assume that this coupling is much smaller than the energy separation between states within $S$ and states outside of $S$. In this case, one often applies degenerate perturbation theory of, e.g. second order, to obtain an effective Hamiltonian. Here we use a different approach. We calculate the effective Hamiltonian by the Schrieffer-Wolff transformation ([Phys. Rev. 149, 491 (1966)](https://doi.org/10.1103/PhysRev.149.491), [Ann. Phys. 326, 2793 (2011)](https://doi.org/10.1016/j.aop.2011.06.004)). It has the benefit to work hassle-free also for complicated systems where standard perturbation theory is very hard to perform.\n",
    "\n",
    "In the following, we focus on a relatively simple system, where we already [calculated the interaction in second order perturbation theory](#degenerate-states). The system consists of two Caesium atoms in a Rydberg s-level, separated by $4\\,\\mathrm{\\mu m}$ with an interaction angle of $\\pi/3$. Here we apply the Schrieffer-Wolff transformation to obtain the effective Hamiltonian that describes the interaction of the s-levels. We start our calculation by defining the subspace $S$ conatining the s-levels."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "state_two_subspace = [\n",
    "    pi.StateTwo([\"Cs\", \"Cs\"], [42, 42], [0, 0], [1 / 2, 1 / 2], [-1 / 2, -1 / 2]),\n",
    "    pi.StateTwo([\"Cs\", \"Cs\"], [42, 42], [0, 0], [1 / 2, 1 / 2], [-1 / 2, 1 / 2]),\n",
    "    pi.StateTwo([\"Cs\", \"Cs\"], [42, 42], [0, 0], [1 / 2, 1 / 2], [1 / 2, -1 / 2]),\n",
    "    pi.StateTwo([\"Cs\", \"Cs\"], [42, 42], [0, 0], [1 / 2, 1 / 2], [1 / 2, 1 / 2]),\n",
    "]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The Hamiltonian acting on the full Hilbert space can be split into a unperturbed Hamiltonian which leaves $S$ invariant and a perturbation which couples $S$ to other states. We define a system containing the unperturbed Hamiltonian and a system containing the perturbed Hamiltonian."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "state_one = state_two_subspace[0].getFirstState()\n",
    "system_one = pi.SystemOne(state_one.getSpecies(), cache)\n",
    "system_one.restrictEnergy(state_one.getEnergy() - 200, state_one.getEnergy() + 200)\n",
    "system_one.restrictN(state_one.getN() - 3, state_one.getN() + 3)\n",
    "system_one.restrictL(state_one.getL() - 1, state_one.getL() + 1)\n",
    "system_two = pi.SystemTwo(system_one, system_one, cache)\n",
    "system_two.restrictEnergy(\n",
    "    state_two_subspace[0].getEnergy() - 20, state_two_subspace[0].getEnergy() + 20\n",
    ")\n",
    "\n",
    "# System containing the unperturbed Hamiltonian, it's a copy of system_two\n",
    "system_two_unperturbed = pi.SystemTwo(system_two)\n",
    "\n",
    "# System containing the perturbed Hamiltonian\n",
    "system_two_perturbed = pi.SystemTwo(system_two)\n",
    "system_two_perturbed.setDistance(4)\n",
    "system_two_perturbed.setAngle(np.pi / 3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We restrict the unperturbed system to $S$. As it does not couple the subspace to other states, this restriction can be done easily. Now the unperturbed system contains four basis vectors. The first basis vector represents the first state out of the subspace $S$, the second basis vector represents the second state, etc."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unperturbed Hamiltonian:\n",
      "[[-4568.44788286     0.             0.             0.        ]\n",
      " [    0.         -4568.44788286     0.             0.        ]\n",
      " [    0.             0.         -4568.44788286     0.        ]\n",
      " [    0.             0.             0.         -4568.44788286]]\n",
      "\n",
      "Basis vectors:\n",
      "[[ 1.  0.  0.  0.]\n",
      " [ 0.  1.  0.  0.]\n",
      " [ 0.  0.  1.  0.]\n",
      " [ 0.  0.  0.  1.]]\n"
     ]
    }
   ],
   "source": [
    "system_two_unperturbed.constrainBasisvectors(\n",
    "    system_two_unperturbed.getBasisvectorIndex(state_two_subspace)\n",
    ")\n",
    "\n",
    "# Print the unperturbed Hamiltonian\n",
    "print(\n",
    "    f\"Unperturbed Hamiltonian:\\n{system_two_unperturbed.getHamiltonian().todense()}\\n\"\n",
    ")\n",
    "\n",
    "# Print the corresponding basis vectors as columns (we just show the coefficients that\n",
    "# belong to the states contained in the considered subspace)\n",
    "print(\n",
    "    \"Basis vectors:\\n{}\".format(\n",
    "        np.round(\n",
    "            system_two_unperturbed.getBasisvectors()[\n",
    "                list(system_two_unperturbed.getStateIndex(state_two_subspace))\n",
    "            ],\n",
    "            3,\n",
    "        ).todense()\n",
    "    )\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The perturbation dresses these four basis vectors by admixing other states. Using the Schrieffer-Wolff transformation, we calculate the dressed basis vectors and unitarily transform the perturbed Hamiltonian into this basis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Effective Hamiltonian:\n",
      "[[ -4.56844757e+03   5.62138780e-06   5.62138575e-06  -9.73653255e-06]\n",
      " [  5.62138780e-06  -4.56844758e+03   7.57291525e-06  -5.62138007e-06]\n",
      " [  5.62138598e-06   7.57291525e-06  -4.56844758e+03  -5.62138302e-06]\n",
      " [ -9.73653255e-06  -5.62138007e-06  -5.62138314e-06  -4.56844757e+03]]\n",
      "\n",
      "Dressed basis vectors:\n",
      "[[ 0.99997  0.       0.       0.     ]\n",
      " [ 0.       0.99997  0.       0.     ]\n",
      " [ 0.       0.       0.99997  0.     ]\n",
      " [ 0.       0.       0.       0.99997]]\n"
     ]
    }
   ],
   "source": [
    "# Diagonalize the perturbed Hamiltonian, pruning values smaller than 1e-16 from\n",
    "# eigenvectors (if we prune too aggressively, the Schrieffer Wolff transformation fails)\n",
    "system_two_perturbed.diagonalize(1e-16)\n",
    "\n",
    "# Apply the Schrieffer Wolff transformation on the perturbed Hamiltonian\n",
    "system_two_perturbed.applySchriefferWolffTransformation(system_two_unperturbed)\n",
    "\n",
    "# Print the effective Hamiltonian\n",
    "print(f\"Effective Hamiltonian:\\n{system_two_perturbed.getHamiltonian().todense()}\\n\")\n",
    "\n",
    "# Print the corresponding basis vectors as columns (we just show the coefficients that\n",
    "# belong to the states contained in the considered subspace)\n",
    "print(\n",
    "    \"Dressed basis vectors:\\n{}\".format(\n",
    "        np.round(\n",
    "            system_two_perturbed.getBasisvectors()[\n",
    "                list(system_two_perturbed.getStateIndex(state_two_subspace))\n",
    "            ],\n",
    "            5,\n",
    "        ).todense()\n",
    "    )\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As the results show, the overlap of the dressed basis vectors with the states of the subspace $S$ is still very large. Thus, we can neglect the admixture of the other states."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  },
  "vscode": {
   "interpreter": {
    "hash": "e7370f93d1d0cde622a1f8e1c04877d8463912d04d973331ad4851f04de6915a"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
