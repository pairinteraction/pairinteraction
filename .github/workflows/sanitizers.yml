name: Sanitizers

on:
  push:
  pull_request:
    types: [opened, reopened]
  workflow_call:
  workflow_dispatch:


env:
  CMAKE_BUILD_PARALLEL_LEVEL: 2
  CTEST_PARALLEL_LEVEL: 2
  CTEST_OUTPUT_ON_FAILURE: 1
  CLICOLOR_FORCE: 1
  VERBOSE: 1
  QT_QPA_PLATFORM: "offscreen"
  QT_DEBUG_PLUGINS: 1

jobs:
  asan:
    # AddressSanitizer (ASan) is a fast memory error detector. ASan needs full
    # control over the memory layout and therefore has to be loaded as the very
    # first library. In principle LD_PRELOAD is needed for Python tests but that
    # produces false positives so we instead use verify_asan_link_order=0 which
    # in turn might miss some actual positives.
    # https://clang.llvm.org/docs/AddressSanitizer.html
    #
    # The following Python tests are also disabled:
    # - python.feast
    #   "attempting free on address which was not malloc()-ed" inside of
    #   scipy.sparse which comes from np.dot(csc_matrix, csc_matrix) and using
    #   suppressions doesn't seem to work
    # - python.parallelization
    #   Deadlocks or just takes really really long.
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/atom-pairinteraction/pairinteraction-debian:docker
    steps:
    - uses: actions/checkout@v4
    - name: Install Python dependencies for cmake
      run: uv pip install --system --break-system-packages --no-cache-dir nanobind numpy
    - name: Configure
      run: cmake -S . -B build/ -DBUILD_TESTING=On -DCMAKE_BUILD_TYPE=Debug
      env:
        CXXFLAGS: "-fno-omit-frame-pointer -fsanitize=address"
        LDFLAGS: "-fsanitize=address"
    - name: Build
      run: cmake --build build/ -- --keep-going
    - name: Test
      run: cmake --build build/ --target test -- --keep-going ARGS="-E '^(python.feast|python.parallelization)'"
      env:
        ASAN_OPTIONS: "symbolize=1:detect_leaks=0:alloc_dealloc_mismatch=0:verify_asan_link_order=0"

  ubsan:
    # UndefinedBehaviorSanitizer (UBSan) is a fast undefined behavior detector.
    # https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/atom-pairinteraction/pairinteraction-debian:docker
    steps:
    - uses: actions/checkout@v4
    - name: Install Python dependencies for cmake
      run: uv pip install --system --break-system-packages --no-cache-dir nanobind numpy
    - name: Configure
      run: cmake -S . -B build/ -DBUILD_TESTING=On -DCMAKE_BUILD_TYPE=Debug
      env:
        CXXFLAGS: "-fsanitize=undefined"
        LDFLAGS: "-fsanitize=undefined"
    - name: Build
      run: cmake --build build/ -- --keep-going
    - name: Test
      run: |
        cat <<'EOF' > known_issues.supp
        # https://gitlab.com/libeigen/eigen/-/commit/3c724c44cff3f9e2e9e35351abff0b5c022b320d
        alignment:_mm_load_sd
        # https://github.com/wjakob/nanobind/commit/c70a8d438e9285d946a1167e8e09f39cb1c4aab2
        null:nb_func_vectorcall_complex
        EOF
        export UBSAN_OPTIONS="symbolize=1:print_stacktrace=1:halt_on_error=1:suppressions=$PWD/known_issues.supp"
        cmake --build build/ --target test -- --keep-going

  glibcxx-debug:
    # The libstdc++ debug mode replaces all iterators by safe iterators and adds
    # extra checks to algorithms. Since changing the size of the iterators
    # changes the size of containers, it's not possible to pass containers
    # between code compiled with debug mode and code compiled
    # without. Attempting to pass containers between them anyway will segfault.
    # https://gcc.gnu.org/onlinedocs/libstdc++/manual/debug_mode.html
    #
    # Disabled tests:
    # - cpp.integration
    #   Segfaults probably because of Boost.Serialization not having debug mode.
    # - python.parallelization
    #   Deadlocks or just takes really really long.
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/atom-pairinteraction/pairinteraction-debian:docker
    steps:
    - uses: actions/checkout@v4
    - name: Install Python dependencies for cmake
      run: uv pip install --system --break-system-packages --no-cache-dir nanobind numpy
    - name: Configure
      run: cmake -S . -B build/ -DBUILD_TESTING=On -DCMAKE_BUILD_TYPE=Debug
      env:
        # For now only lightweight assertions until DuckDB is also compiled with _GLIBCXX_DEBUG
        CXXFLAGS: "-D_GLIBCXX_ASSERTIONS"
    - name: Build
      run: cmake --build build/ -- --keep-going
    - name: Test
      run: cmake --build build/ --target test -- --keep-going ARGS="-E '^(cpp.integration|python.parallelization)'"
