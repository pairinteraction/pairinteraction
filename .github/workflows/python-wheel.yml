name: Python Wheel

on:
  push:
    branches: ["*"]
    tags: ["v*.*.*"]  # and run on tags that describe new versions
  pull_request:
    types: [opened, reopened]
  workflow_call:
  workflow_dispatch:

env:
  CMAKE_BUILD_PARALLEL_LEVEL: 2
  CTEST_PARALLEL_LEVEL: 2
  CTEST_OUTPUT_ON_FAILURE: 1
  CLICOLOR_FORCE: 1
  VERBOSE: 1

jobs:
  sdist:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v4

    - name: Build SDist
      run: pipx run build --sdist

    - name: Check metadata
      run: pipx run twine check dist/*

    - uses: actions/upload-artifact@v4
      with:
        name: dist-sdist
        path: dist/*.tar.gz

  wheel:
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: ubuntu-latest # runs in container anyway
        - os: macos-13
        - os: macos-14
        - os: windows-2019
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v4

    - name: Log in to the Container registry
      if: runner.os == 'Linux'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Install Windows dependencies
      if: runner.os == 'Windows'
      uses: ./.github/actions/setup-vcpkg

    - name: Install macOS dependencies
      if: runner.os == 'macOS'
      run: brew install --force-bottle doctest spdlog eigen fmt lapack nlohmann-json cpp-httplib tbb

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        version: "0.5.15"
        enable-cache: true
        cache-dependency-glob: |
          ./pyproject.toml
          ./.build_requirements.txt

    - uses: pypa/cibuildwheel@v2.22
      env:
        CIBW_SKIP: ${{ !startsWith(github.ref, 'refs/tags/') && 'cp3{9,10,11}*' || '' }}

    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: dist-wheel-${{ matrix.os }}
        path: wheelhouse/*.whl

  test-with-downloaded-database:
    name: Test with downloaded database
    runs-on: ubuntu-latest
    needs: [wheel]
    steps:
    - name: Download the wheel
      uses: actions/download-artifact@v4
      with:
        name: dist-wheel-ubuntu-latest
        path: dist

    - name: Install the wheel
      run: |
        python -m pip install --upgrade pip
        python -m pip install dist/*.whl

    - name: Execute a test that downloads the database and runs checks
      run: python -c "import sys; from pairinteraction import run_module_tests; sys.exit(run_module_tests(download_missing=True))"

  publish-to-testpypi:
    name: Publish to TestPyPI
    if: startsWith(github.ref, 'refs/tags/')  # only publish to TestPyPI on tag pushes
    needs: [sdist, wheel]
    runs-on: ubuntu-latest

    environment:
      name: testpypi
      url: https://test.pypi.org/p/pairinteraction

    permissions:
      id-token: write

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        path: dist
        pattern: dist-*
        merge-multiple: true

    - name: Publish distribution to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: dist/
        repository-url: https://test.pypi.org/legacy/
